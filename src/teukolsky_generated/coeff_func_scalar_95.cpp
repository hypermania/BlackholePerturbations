
#include "../teukolsky.hpp"

namespace Teukolsky {

void compute_coeffs_scalar_475(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[475] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("-0.08125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-12))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-7))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((5)*(pow(a,8)))+(((33)*(pow(r,8)))+(((40)*((pow(a,6))*((r)*((M)+(r)))))+(((24)*((pow(a,2))*((pow(r,5))*(((3)*(M))+((4)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(pow(((4)*(M))+((7)*(r)),2)))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((128)*(pow(a,12)))+(((3465)*(pow(r,12)))+(((105)*((pow(a,2))*((pow(r,9))*(((94)*(M))+((151)*(r))))))+(((3)*((pow(a,10))*((r)*(((1186)*(M))+((849)*(r))))))+(((42)*((pow(a,4))*((pow(r,6))*(((156)*(pow(M,2)))+(((784)*((M)*(r)))+((689)*(pow(r,2))))))))+(((3)*((pow(a,8))*((pow(r,2))*(((2024)*(pow(M,2)))+(((6768)*((M)*(r)))+((4111)*(pow(r,2))))))))+((2)*((pow(a,6))*((pow(r,3))*(((160)*(pow(M,3)))+(((6312)*((pow(M,2))*(r)))+(((19902)*((M)*(pow(r,2))))+((13231)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((105)*((r)*((pow((pow(a,2))+(pow(r,2)),2))*((((33)*(pow(r,11)))+(((5)*((pow(a,10))*(((2)*(M))+(r))))+(((5)*((pow(a,8))*((r)*(pow(((4)*(M))+((3)*(r)),2)))))+(((3)*((pow(a,2))*((pow(r,8))*(((46)*(M))+((43)*(r))))))+(((2)*((pow(a,4))*((pow(r,5))*(((88)*(pow(M,2)))+(((188)*((M)*(r)))+((97)*(pow(r,2))))))))+((2)*((pow(a,6))*((pow(r,2))*(((32)*(pow(M,3)))+(((128)*((pow(M,2))*(r)))+(((174)*((M)*(pow(r,2))))+((69)*(pow(r,3))))))))))))))*(expr[3]))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_476(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[476] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("0.001562500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("3.244042158143066396842944716426817297175273058202806159267720094394195171226490160588318436187357013"))*((pow(a,-14))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-8))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((5)*(pow(a,8)))+(((33)*(pow(r,8)))+(((40)*((pow(a,6))*((r)*((M)+(r)))))+(((24)*((pow(a,2))*((pow(r,5))*(((3)*(M))+((4)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(pow(((4)*(M))+((7)*(r)),2)))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((2048)*(pow(a,16)))+(((225225)*(pow(r,16)))+(((15015)*((pow(a,2))*((pow(r,13))*(((58)*(M))+((91)*(r))))))+(((pow(a,14))*((r)*(((109022)*(M))+((70895)*(r)))))+(((1155)*((pow(a,4))*((pow(r,10))*(((888)*(pow(M,2)))+(((3636)*((M)*(r)))+((3043)*(pow(r,2))))))))+(((3)*((pow(a,12))*((pow(r,2))*(((167512)*(pow(M,2)))+(((385556)*((M)*(r)))+((188185)*(pow(r,2))))))))+(((9)*((pow(a,6))*((pow(r,7))*(((39744)*(pow(M,3)))+(((396224)*((pow(M,2))*(r)))+(((911458)*((M)*(pow(r,2))))+((551357)*(pow(r,3)))))))))+(((pow(a,10))*((pow(r,3))*(((339776)*(pow(M,3)))+(((2519808)*((pow(M,2))*(r)))+(((4402842)*((M)*(pow(r,2))))+((2055695)*(pow(r,3))))))))+((pow(a,8))*((pow(r,4))*(((8960)*(pow(M,4)))+(((697472)*((pow(M,3))*(r)))+(((4557648)*((pow(M,2))*(pow(r,2))))+(((8229608)*((M)*(pow(r,3))))+((4148675)*(pow(r,4)))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((315)*((r)*((pow((pow(a,2))+(pow(r,2)),2))*((((715)*(pow(r,15)))+(((35)*((pow(a,14))*(((2)*(M))+(r))))+(((143)*((pow(a,2))*((pow(r,12))*(((26)*(M))+((27)*(r))))))+(((35)*((pow(a,12))*((r)*(((32)*(pow(M,2)))+(((44)*((M)*(r)))+((15)*(pow(r,2))))))))+(((11)*((pow(a,4))*((pow(r,9))*(((608)*(pow(M,2)))+(((1420)*((M)*(r)))+((789)*(pow(r,2))))))))+(((7)*((pow(a,10))*((pow(r,2))*(((384)*(pow(M,3)))+(((1216)*((pow(M,2))*(r)))+(((1238)*((M)*(pow(r,2))))+((393)*(pow(r,3)))))))))+(((pow(a,6))*((pow(r,6))*(((4736)*(pow(M,3)))+(((19648)*((pow(M,2))*(r)))+(((25882)*((M)*(pow(r,2))))+((10441)*(pow(r,3))))))))+((pow(a,8))*((pow(r,3))*(((1024)*(pow(M,4)))+(((7424)*((pow(M,3))*(r)))+(((20352)*((pow(M,2))*(pow(r,2))))+(((21176)*((M)*(pow(r,3))))+((7169)*(pow(r,4))))))))))))))))*(expr[3])))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_477(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[477] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("-0.0006510416666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667"))*((HighPrecisionScalar("0.4861724348043977324610180637835266176226948326674056520450268566538073591160701947111252196130745571"))*((pow(a,-16))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-9))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((5)*(pow(a,8)))+(((33)*(pow(r,8)))+(((40)*((pow(a,6))*((r)*((M)+(r)))))+(((24)*((pow(a,2))*((pow(r,5))*(((3)*(M))+((4)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(pow(((4)*(M))+((7)*(r)),2)))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((32768)*(pow(a,20)))+(((14549535)*(pow(r,20)))+(((255255)*((pow(a,2))*((pow(r,17))*(((278)*(M))+((431)*(r))))))+(((5)*((pow(a,18))*((r)*(((568042)*(M))+((349557)*(r))))))+(((12012)*((pow(a,4))*((pow(r,14))*(((9954)*(pow(M,2)))+(((37306)*((M)*(r)))+((30411)*(pow(r,2))))))))+(((5)*((pow(a,16))*((pow(r,2))*(((5026200)*(pow(M,2)))+(((9570536)*((M)*(r)))+((4107651)*(pow(r,2))))))))+(((1716)*((pow(a,6))*((pow(r,11))*(((46608)*(pow(M,3)))+(((348156)*((pow(M,2))*(r)))+(((705080)*((M)*(pow(r,2))))+((406635)*(pow(r,3)))))))))+(((4)*((pow(a,14))*((pow(r,3))*(((11537744)*(pow(M,3)))+(((55003116)*((pow(M,2))*(r)))+(((72514028)*((M)*(pow(r,2))))+((27771703)*(pow(r,3)))))))))+(((22)*((pow(a,8))*((pow(r,8))*(((783488)*(pow(M,4)))+(((12974720)*((pow(M,3))*(r)))+(((55432812)*((pow(M,2))*(pow(r,2))))+(((82462820)*((M)*(pow(r,3))))+((38323295)*(pow(r,4))))))))))+(((4)*((pow(a,12))*((pow(r,4))*(((4147904)*(pow(M,4)))+(((54446784)*((pow(M,3))*(r)))+(((186996186)*((pow(M,2))*(pow(r,2))))+(((225694490)*((M)*(pow(r,3))))+((85876545)*(pow(r,4))))))))))+((2)*((pow(a,10))*((pow(r,5))*(((129024)*(pow(M,5)))+(((16914176)*((pow(M,4))*(r)))+(((188550336)*((pow(M,3))*(pow(r,2))))+(((647378448)*((pow(M,2))*(pow(r,3))))+(((819578930)*((M)*(pow(r,4))))+((333200499)*(pow(r,5)))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((3465)*((r)*((pow((pow(a,2))+(pow(r,2)),2))*((((4199)*(pow(r,19)))+(((63)*((pow(a,18))*(((2)*(M))+(r))))+(((221)*((pow(a,2))*((pow(r,16))*(((118)*(M))+((131)*(r))))))+(((21)*((pow(a,16))*((r)*(((160)*(pow(M,2)))+(((208)*((M)*(r)))+((67)*(pow(r,2))))))))+(((52)*((pow(a,4))*((pow(r,13))*(((1160)*(pow(M,2)))+(((2852)*((M)*(r)))+((1667)*(pow(r,2))))))))+(((84)*((pow(a,14))*((pow(r,2))*(((192)*(pow(M,3)))+(((528)*((pow(M,2))*(r)))+(((466)*((M)*(pow(r,2))))+((131)*(pow(r,3)))))))))+(((52)*((pow(a,6))*((pow(r,10))*(((1216)*(pow(M,3)))+(((5136)*((pow(M,2))*(r)))+(((6834)*((M)*(pow(r,2))))+((2831)*(pow(r,3)))))))))+(((12)*((pow(a,12))*((pow(r,3))*(((1536)*(pow(M,4)))+(((8448)*((pow(M,3))*(r)))+(((16584)*((pow(M,2))*(pow(r,2))))+(((13284)*((M)*(pow(r,3))))+((3673)*(pow(r,4))))))))))+(((2)*((pow(a,8))*((pow(r,7))*(((14336)*(pow(M,4)))+(((97792)*((pow(M,3))*(r)))+(((236784)*((pow(M,2))*(pow(r,2))))+(((231928)*((M)*(pow(r,3))))+((77609)*(pow(r,4))))))))))+((2)*((pow(a,10))*((pow(r,4))*(((2048)*(pow(M,5)))+(((23552)*((pow(M,4))*(r)))+(((108800)*((pow(M,3))*(pow(r,2))))+(((212416)*((pow(M,2))*(pow(r,3))))+(((177610)*((M)*(pow(r,4))))+((52177)*(pow(r,5))))))))))))))))))))*(expr[3])))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_478(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[478] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("0.1015625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-12))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-7))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,8))+(((33)*(pow(r,8)))+(((4)*((pow(a,6))*((r)*(((8)*(M))+((5)*(r))))))+(((12)*((pow(a,2))*((pow(r,5))*(((8)*(M))+((7)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(((32)*(pow(M,2)))+(((64)*((M)*(r)))+((35)*(pow(r,2))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((919)*(pow(a,12)))+(((3465)*(pow(r,12)))+(((420)*((pow(a,2))*((pow(r,9))*(((13)*(M))+((43)*(r))))))+(((12)*((pow(a,10))*((r)*(((391)*(M))+((655)*(r))))))+(((21)*((pow(a,4))*((pow(r,6))*(((32)*(pow(M,2)))+(((1008)*((M)*(r)))+((1833)*(pow(r,2))))))))+(((3)*((pow(a,8))*((pow(r,2))*(((288)*(pow(M,2)))+(((6544)*((M)*(r)))+((8577)*(pow(r,2))))))))+((8)*((pow(a,6))*((pow(r,3))*(((-16)*(pow(M,3)))+(((192)*((pow(M,2))*(r)))+(((3831)*((M)*(pow(r,2))))+((5336)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((105)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(a,8))+(((33)*(pow(r,8)))+(((4)*((pow(a,6))*((r)*(((8)*(M))+((5)*(r))))))+(((12)*((pow(a,2))*((pow(r,5))*(((8)*(M))+((7)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(((32)*(pow(M,2)))+(((64)*((M)*(r)))+((35)*(pow(r,2))))))))))))*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_479(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[479] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("-0.003906250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("8.582928793055821843613863859562502139548281217014381842790180401788076128396922590299822556559041754"))*((pow(a,-14))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-8))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,8))+(((33)*(pow(r,8)))+(((4)*((pow(a,6))*((r)*(((8)*(M))+((5)*(r))))))+(((12)*((pow(a,2))*((pow(r,5))*(((8)*(M))+((7)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(((32)*(pow(M,2)))+(((64)*((M)*(r)))+((35)*(pow(r,2))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((3781)*(pow(a,16)))+(((45045)*(pow(r,16)))+(((60060)*((pow(a,2))*((pow(r,13))*(((2)*(M))+((5)*(r))))))+(((4)*((pow(a,14))*((r)*(((11554)*(M))+((13339)*(r))))))+(((924)*((pow(a,4))*((pow(r,10))*(((84)*(pow(M,2)))+(((696)*((M)*(r)))+((931)*(pow(r,2))))))))+(((12)*((pow(a,12))*((pow(r,2))*(((5828)*(pow(M,2)))+(((28936)*((M)*(r)))+((23759)*(pow(r,2))))))))+(((36)*((pow(a,6))*((pow(r,7))*(((128)*(pow(M,3)))+(((8432)*((pow(M,2))*(r)))+(((39366)*((M)*(pow(r,2))))+((38253)*(pow(r,3)))))))))+(((4)*((pow(a,10))*((pow(r,3))*(((1408)*(pow(M,3)))+(((72048)*((pow(M,2))*(r)))+(((261786)*((M)*(pow(r,2))))+((200653)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((-256)*(pow(M,4)))+(((5120)*((pow(M,3))*(r)))+(((222096)*((pow(M,2))*(pow(r,2))))+(((820160)*((M)*(pow(r,3))))+((669599)*(pow(r,4))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((315)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(a,12))+(((143)*(pow(r,12)))+(((572)*((pow(a,2))*((pow(r,9))*((M)+(r)))))+(((12)*((pow(a,10))*((r)*(((5)*(M))+((3)*(r))))))+(((5)*((pow(a,8))*((pow(r,2))*(pow(((8)*(M))+((7)*(r)),2)))))+(((11)*((pow(a,4))*((pow(r,6))*(pow(((8)*(M))+((9)*(r)),2)))))+((8)*((pow(a,6))*((pow(r,3))*(((32)*(pow(M,3)))+(((128)*((pow(M,2))*(r)))+(((189)*((M)*(pow(r,2))))+((84)*(pow(r,3)))))))))))))))*(expr[3]))))))))))))))).cast<double>());
}

}
