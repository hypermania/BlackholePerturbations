
#include "../teukolsky_scalar.hpp"
#include <map>

typedef TeukolskyScalarPDE::HighPrecisionScalar HighPrecisionScalar;


void compute_coeffs_790(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[790] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.00003051757812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-21))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-11))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*(((pow(a,12))+(((323)*(pow(r,12)))+(((12)*((pow(a,10))*((r)*(((7)*(M))+((4)*(r))))))+(((204)*((pow(a,2))*((pow(r,9))*(((7)*(M))+((6)*(r))))))+(((3)*((pow(a,8))*((pow(r,2))*(((224)*(pow(M,2)))+(((336)*((M)*(r)))+((131)*(pow(r,2))))))))+(((3)*((pow(a,4))*((pow(r,6))*(((672)*(pow(M,2)))+(((1232)*((M)*(r)))+((593)*(pow(r,2))))))))+((8)*((pow(a,6))*((pow(r,3))*(((112)*(pow(M,3)))+(((336)*((pow(M,2))*(r)))+(((399)*((M)*(pow(r,2))))+((153)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((643083)*(pow(a,24)))+(((14549535)*(pow(r,24)))+(((1021020)*((pow(a,2))*((pow(r,21))*(((44)*(M))+((149)*(r))))))+(((28)*((pow(a,22))*((r)*(((419776)*(M))+((485495)*(r))))))+(((6006)*((pow(a,4))*((pow(r,18))*(((6008)*(pow(M,2)))+(((68792)*((M)*(r)))+((120247)*(pow(r,2))))))))+(((14)*((pow(a,20))*((pow(r,2))*(((2123672)*(pow(M,2)))+(((10519192)*((M)*(r)))+((8180131)*(pow(r,2))))))))+(((1716)*((pow(a,6))*((pow(r,15))*(((1920)*(pow(M,3)))+(((165344)*((pow(M,2))*(r)))+(((990288)*((M)*(pow(r,2))))+((1197705)*(pow(r,3)))))))))+(((4)*((pow(a,18))*((pow(r,3))*(((1353600)*(pow(M,3)))+(((61493216)*((pow(M,2))*(r)))+(((200140308)*((M)*(pow(r,2))))+((134927775)*(pow(r,3)))))))))+(((143)*((pow(a,8))*((pow(r,12))*(((-5120)*(pow(M,4)))+(((148480)*((pow(M,3))*(r)))+(((6815808)*((pow(M,2))*(pow(r,2))))+(((28755904)*((M)*(pow(r,3))))+((27258115)*(pow(r,4))))))))))+(((pow(a,16))*((pow(r,4))*(((-1448960)*(pow(M,4)))+(((29588480)*((pow(M,3))*(r)))+(((887157184)*((pow(M,2))*(pow(r,2))))+(((2512539968)*((M)*(pow(r,3))))+((1628487625)*(pow(r,4)))))))))+(((104)*((pow(a,10))*((pow(r,9))*(((2048)*(pow(M,5)))+(((-33280)*((pow(M,4))*(r)))+(((550720)*((pow(M,3))*(pow(r,2))))+(((18366032)*((pow(M,2))*(pow(r,3))))+(((62259452)*((M)*(pow(r,4))))+((49787971)*(pow(r,5)))))))))))+(((8)*((pow(a,14))*((pow(r,5))*(((45056)*(pow(M,5)))+(((-611840)*((pow(M,4))*(r)))+(((8453440)*((pow(M,3))*(pow(r,2))))+(((227865296)*((pow(M,2))*(pow(r,3))))+(((634308104)*((M)*(pow(r,4))))+((420535085)*(pow(r,5)))))))))))+((4)*((pow(a,12))*((pow(r,6))*(((-12288)*(pow(M,6)))+(((143360)*((pow(M,5))*(r)))+(((-1543680)*((pow(M,4))*(pow(r,2))))+(((20697600)*((pow(M,3))*(pow(r,3))))+(((583764920)*((pow(M,2))*(pow(r,4))))+(((1730238552)*((M)*(pow(r,5))))+((1231153095)*(pow(r,6))))))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((45045)*((pow((pow(a,2))+(pow(r,2)),8))*(((pow(a,12))+(((323)*(pow(r,12)))+(((12)*((pow(a,10))*((r)*(((7)*(M))+((4)*(r))))))+(((204)*((pow(a,2))*((pow(r,9))*(((7)*(M))+((6)*(r))))))+(((3)*((pow(a,8))*((pow(r,2))*(((224)*(pow(M,2)))+(((336)*((M)*(r)))+((131)*(pow(r,2))))))))+(((3)*((pow(a,4))*((pow(r,6))*(((672)*(pow(M,2)))+(((1232)*((M)*(r)))+((593)*(pow(r,2))))))))+((8)*((pow(a,6))*((pow(r,3))*(((112)*(pow(M,3)))+(((336)*((pow(M,2))*(r)))+(((399)*((M)*(pow(r,2))))+((153)*(pow(r,3)))))))))))))))*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_791(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[791] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("-0.0004882812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-20))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-11))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,12))+(((323)*(pow(r,12)))+(((12)*((pow(a,10))*((r)*(((7)*(M))+((4)*(r))))))+(((204)*((pow(a,2))*((pow(r,9))*(((7)*(M))+((6)*(r))))))+(((3)*((pow(a,8))*((pow(r,2))*(((224)*(pow(M,2)))+(((336)*((M)*(r)))+((131)*(pow(r,2))))))))+(((3)*((pow(a,4))*((pow(r,6))*(((672)*(pow(M,2)))+(((1232)*((M)*(r)))+((593)*(pow(r,2))))))))+((8)*((pow(a,6))*((pow(r,3))*(((112)*(pow(M,3)))+(((336)*((pow(M,2))*(r)))+(((399)*((M)*(pow(r,2))))+((153)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((643083)*(pow(a,24)))+(((14549535)*(pow(r,24)))+(((1021020)*((pow(a,2))*((pow(r,21))*(((44)*(M))+((149)*(r))))))+(((28)*((pow(a,22))*((r)*(((419776)*(M))+((485495)*(r))))))+(((6006)*((pow(a,4))*((pow(r,18))*(((6008)*(pow(M,2)))+(((68792)*((M)*(r)))+((120247)*(pow(r,2))))))))+(((14)*((pow(a,20))*((pow(r,2))*(((2123672)*(pow(M,2)))+(((10519192)*((M)*(r)))+((8180131)*(pow(r,2))))))))+(((1716)*((pow(a,6))*((pow(r,15))*(((1920)*(pow(M,3)))+(((165344)*((pow(M,2))*(r)))+(((990288)*((M)*(pow(r,2))))+((1197705)*(pow(r,3)))))))))+(((4)*((pow(a,18))*((pow(r,3))*(((1353600)*(pow(M,3)))+(((61493216)*((pow(M,2))*(r)))+(((200140308)*((M)*(pow(r,2))))+((134927775)*(pow(r,3)))))))))+(((143)*((pow(a,8))*((pow(r,12))*(((-5120)*(pow(M,4)))+(((148480)*((pow(M,3))*(r)))+(((6815808)*((pow(M,2))*(pow(r,2))))+(((28755904)*((M)*(pow(r,3))))+((27258115)*(pow(r,4))))))))))+(((pow(a,16))*((pow(r,4))*(((-1448960)*(pow(M,4)))+(((29588480)*((pow(M,3))*(r)))+(((887157184)*((pow(M,2))*(pow(r,2))))+(((2512539968)*((M)*(pow(r,3))))+((1628487625)*(pow(r,4)))))))))+(((104)*((pow(a,10))*((pow(r,9))*(((2048)*(pow(M,5)))+(((-33280)*((pow(M,4))*(r)))+(((550720)*((pow(M,3))*(pow(r,2))))+(((18366032)*((pow(M,2))*(pow(r,3))))+(((62259452)*((M)*(pow(r,4))))+((49787971)*(pow(r,5)))))))))))+(((8)*((pow(a,14))*((pow(r,5))*(((45056)*(pow(M,5)))+(((-611840)*((pow(M,4))*(r)))+(((8453440)*((pow(M,3))*(pow(r,2))))+(((227865296)*((pow(M,2))*(pow(r,3))))+(((634308104)*((M)*(pow(r,4))))+((420535085)*(pow(r,5)))))))))))+((4)*((pow(a,12))*((pow(r,6))*(((-12288)*(pow(M,6)))+(((143360)*((pow(M,5))*(r)))+(((-1543680)*((pow(M,4))*(pow(r,2))))+(((20697600)*((pow(M,3))*(pow(r,3))))+(((583764920)*((pow(M,2))*(pow(r,4))))+(((1730238552)*((M)*(pow(r,5))))+((1231153095)*(pow(r,6))))))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((45045)*((pow((pow(a,2))+(pow(r,2)),8))*(((pow(a,12))+(((323)*(pow(r,12)))+(((12)*((pow(a,10))*((r)*(((7)*(M))+((4)*(r))))))+(((204)*((pow(a,2))*((pow(r,9))*(((7)*(M))+((6)*(r))))))+(((3)*((pow(a,8))*((pow(r,2))*(((224)*(pow(M,2)))+(((336)*((M)*(r)))+((131)*(pow(r,2))))))))+(((3)*((pow(a,4))*((pow(r,6))*(((672)*(pow(M,2)))+(((1232)*((M)*(r)))+((593)*(pow(r,2))))))))+((8)*((pow(a,6))*((pow(r,3))*(((112)*(pow(M,3)))+(((336)*((pow(M,2))*(r)))+(((399)*((M)*(pow(r,2))))+((153)*(pow(r,3)))))))))))))))*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_792(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[792] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.001953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("0.08362420100070907707083804724612319310483277122473564973537084974932814650837318816667645408824322535"))*((pow(a,-15))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-8))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((2)*(pow(a,4)))+(((-3)*((pow(a,2))*((r)*(((2)*(M))+((33)*(r))))))+((2)*((pow(r,2))*(((2)*(pow(M,2)))+(((109)*((M)*(r)))+((-55)*(pow(r,2)))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((49152)*(pow(a,24)))+(((14549535)*(pow(r,24)))+(((255255)*((pow(a,2))*((pow(r,21))*(((254)*(M))+((557)*(r))))))+(((3)*((pow(a,22))*((r)*(((1297118)*(M))+((845167)*(r))))))+(((3003)*((pow(a,4))*((pow(r,18))*(((31256)*(pow(M,2)))+(((184644)*((M)*(r)))+((208839)*(pow(r,2))))))))+(((pow(a,20))*((pow(r,2))*(((29571560)*(pow(M,2)))+(((68485100)*((M)*(r)))+((32039369)*(pow(r,2)))))))+(((429)*((pow(a,6))*((pow(r,15))*(((106688)*(pow(M,3)))+(((1590304)*((pow(M,2))*(r)))+(((4911738)*((M)*(pow(r,2))))+((3838869)*(pow(r,3)))))))))+(((pow(a,18))*((pow(r,3))*(((39568832)*(pow(M,3)))+(((295925728)*((pow(M,2))*(r)))+(((470931594)*((M)*(pow(r,2))))+((196700679)*(pow(r,3))))))))+(((286)*((pow(a,8))*((pow(r,12))*(((8960)*(pow(M,4)))+(((942272)*((pow(M,3))*(r)))+(((7522368)*((pow(M,2))*(pow(r,2))))+(((16344344)*((M)*(pow(r,3))))+((9992189)*(pow(r,4))))))))))+(((pow(a,16))*((pow(r,4))*(((3709440)*(pow(M,4)))+(((244831872)*((pow(M,3))*(r)))+(((1249040576)*((pow(M,2))*(pow(r,2))))+(((1770806352)*((M)*(pow(r,3))))+((722793771)*(pow(r,4)))))))))+(((26)*((pow(a,10))*((pow(r,9))*(((-14336)*(pow(M,5)))+(((430080)*((pow(M,4))*(r)))+(((25383840)*((pow(M,3))*(pow(r,2))))+(((147617680)*((pow(M,2))*(pow(r,3))))+(((257037690)*((M)*(pow(r,4))))+((132179979)*(pow(r,5)))))))))))+(((2)*((pow(a,14))*((pow(r,5))*(((-272384)*(pow(M,5)))+(((6737920)*((pow(M,4))*(r)))+(((314632480)*((pow(M,3))*(pow(r,2))))+(((1467564784)*((pow(M,2))*(pow(r,3))))+(((2072476826)*((M)*(pow(r,4))))+((874023017)*(pow(r,5)))))))))))+((2)*((pow(a,12))*((pow(r,6))*(((28672)*(pow(M,6)))+(((-458752)*((pow(M,5))*(r)))+(((9192960)*((pow(M,4))*(pow(r,2))))+(((430130560)*((pow(M,3))*(pow(r,3))))+(((2113742120)*((pow(M,2))*(pow(r,4))))+(((3203233572)*((M)*(pow(r,5))))+((1459336053)*(pow(r,6))))))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((45045)*((r)*((pow((pow(a,2))+(pow(r,2)),6))*((((323)*(pow(r,15)))+(((7)*((pow(a,14))*(((2)*(M))+(r))))+(((17)*((pow(a,2))*((pow(r,12))*(((110)*(M))+((97)*(r))))))+(((7)*((pow(a,12))*((r)*(((48)*(pow(M,2)))+(((60)*((M)*(r)))+((19)*(pow(r,2))))))))+(((3)*((pow(a,4))*((pow(r,9))*(((1296)*(pow(M,2)))+(((2444)*((M)*(r)))+((1157)*(pow(r,2))))))))+(((21)*((pow(a,10))*((pow(r,2))*(((64)*(pow(M,3)))+(((160)*((pow(M,2))*(r)))+(((138)*((M)*(pow(r,2))))+((39)*(pow(r,3)))))))))+(((pow(a,6))*((pow(r,6))*(((3392)*(pow(M,3)))+(((10464)*((pow(M,2))*(r)))+(((11154)*((M)*(pow(r,2))))+((3861)*(pow(r,3))))))))+((pow(a,8))*((pow(r,3))*(((1024)*(pow(M,4)))+(((4736)*((pow(M,3))*(r)))+(((9600)*((pow(M,2))*(pow(r,2))))+(((8184)*((M)*(pow(r,3))))+((2409)*(pow(r,4))))))))))))))))*(expr[3])))))))))))))))).cast<double>());
}

void compute_coeffs_793(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[793] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.0004882812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("0.1740776559556978381772912566126948278248564987267512838696932566838151733774971099099128898665693370"))*((pow(a,-17))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-9))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((6)*(pow(a,8)))+(((pow(a,6))*((((14)*(M))+((-269)*(r)))*(r)))+(((22)*((pow(r,6))*(((2)*(pow(M,2)))+(((109)*((M)*(r)))+((-55)*(pow(r,2)))))))+(((-2)*((pow(a,4))*((pow(r,2))*(((42)*(pow(M,2)))+(((507)*((M)*(r)))+((847)*(pow(r,2))))))))+((pow(a,2))*((pow(r,3))*(((64)*(pow(M,3)))+(((3544)*((pow(M,2))*(r)))+(((1226)*((M)*(pow(r,2))))+((-2629)*(pow(r,3))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((49152)*(pow(a,24)))+(((14549535)*(pow(r,24)))+(((255255)*((pow(a,2))*((pow(r,21))*(((254)*(M))+((557)*(r))))))+(((3)*((pow(a,22))*((r)*(((1297118)*(M))+((845167)*(r))))))+(((3003)*((pow(a,4))*((pow(r,18))*(((31256)*(pow(M,2)))+(((184644)*((M)*(r)))+((208839)*(pow(r,2))))))))+(((pow(a,20))*((pow(r,2))*(((29571560)*(pow(M,2)))+(((68485100)*((M)*(r)))+((32039369)*(pow(r,2)))))))+(((429)*((pow(a,6))*((pow(r,15))*(((106688)*(pow(M,3)))+(((1590304)*((pow(M,2))*(r)))+(((4911738)*((M)*(pow(r,2))))+((3838869)*(pow(r,3)))))))))+(((pow(a,18))*((pow(r,3))*(((39568832)*(pow(M,3)))+(((295925728)*((pow(M,2))*(r)))+(((470931594)*((M)*(pow(r,2))))+((196700679)*(pow(r,3))))))))+(((286)*((pow(a,8))*((pow(r,12))*(((8960)*(pow(M,4)))+(((942272)*((pow(M,3))*(r)))+(((7522368)*((pow(M,2))*(pow(r,2))))+(((16344344)*((M)*(pow(r,3))))+((9992189)*(pow(r,4))))))))))+(((pow(a,16))*((pow(r,4))*(((3709440)*(pow(M,4)))+(((244831872)*((pow(M,3))*(r)))+(((1249040576)*((pow(M,2))*(pow(r,2))))+(((1770806352)*((M)*(pow(r,3))))+((722793771)*(pow(r,4)))))))))+(((26)*((pow(a,10))*((pow(r,9))*(((-14336)*(pow(M,5)))+(((430080)*((pow(M,4))*(r)))+(((25383840)*((pow(M,3))*(pow(r,2))))+(((147617680)*((pow(M,2))*(pow(r,3))))+(((257037690)*((M)*(pow(r,4))))+((132179979)*(pow(r,5)))))))))))+(((2)*((pow(a,14))*((pow(r,5))*(((-272384)*(pow(M,5)))+(((6737920)*((pow(M,4))*(r)))+(((314632480)*((pow(M,3))*(pow(r,2))))+(((1467564784)*((pow(M,2))*(pow(r,3))))+(((2072476826)*((M)*(pow(r,4))))+((874023017)*(pow(r,5)))))))))))+((2)*((pow(a,12))*((pow(r,6))*(((28672)*(pow(M,6)))+(((-458752)*((pow(M,5))*(r)))+(((9192960)*((pow(M,4))*(pow(r,2))))+(((430130560)*((pow(M,3))*(pow(r,3))))+(((2113742120)*((pow(M,2))*(pow(r,4))))+(((3203233572)*((M)*(pow(r,5))))+((1459336053)*(pow(r,6))))))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((45045)*((r)*((pow((pow(a,2))+(pow(r,2)),6))*((((323)*(pow(r,15)))+(((7)*((pow(a,14))*(((2)*(M))+(r))))+(((17)*((pow(a,2))*((pow(r,12))*(((110)*(M))+((97)*(r))))))+(((7)*((pow(a,12))*((r)*(((48)*(pow(M,2)))+(((60)*((M)*(r)))+((19)*(pow(r,2))))))))+(((3)*((pow(a,4))*((pow(r,9))*(((1296)*(pow(M,2)))+(((2444)*((M)*(r)))+((1157)*(pow(r,2))))))))+(((21)*((pow(a,10))*((pow(r,2))*(((64)*(pow(M,3)))+(((160)*((pow(M,2))*(r)))+(((138)*((M)*(pow(r,2))))+((39)*(pow(r,3)))))))))+(((pow(a,6))*((pow(r,6))*(((3392)*(pow(M,3)))+(((10464)*((pow(M,2))*(r)))+(((11154)*((M)*(pow(r,2))))+((3861)*(pow(r,3))))))))+((pow(a,8))*((pow(r,3))*(((1024)*(pow(M,4)))+(((4736)*((pow(M,3))*(r)))+(((9600)*((pow(M,2))*(pow(r,2))))+(((8184)*((M)*(pow(r,3))))+((2409)*(pow(r,4))))))))))))))))*(expr[3])))))))))))))))).cast<double>());
}

void compute_coeffs_794(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[794] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.0002441406250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("0.4668497809239262658154288658817354805205529861927695951606945544754039733437978724410651671423814387"))*((pow(a,-19))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-10))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((6)*(pow(a,12)))+(((pow(a,10))*((((62)*(M))+((-233)*(r)))*(r)))+(((78)*((pow(r,10))*(((2)*(pow(M,2)))+(((109)*((M)*(r)))+((-55)*(pow(r,2)))))))+(((-10)*((pow(a,8))*((pow(r,2))*(((10)*(pow(M,2)))+(((321)*((M)*(r)))+((331)*(pow(r,2))))))))+(((13)*((pow(a,2))*((pow(r,7))*(((32)*(pow(M,3)))+(((1776)*((pow(M,2))*(r)))+(((846)*((M)*(pow(r,2))))+((-1177)*(pow(r,3)))))))))+(((-2)*((pow(a,6))*((pow(r,3))*(((112)*(pow(M,3)))+(((-824)*((pow(M,2))*(r)))+(((6018)*((M)*(pow(r,2))))+((6309)*(pow(r,3)))))))))+((2)*((pow(a,4))*((pow(r,4))*(((128)*(pow(M,4)))+(((7264)*((pow(M,3))*(r)))+(((12052)*((pow(M,2))*(pow(r,2))))+(((-3134)*((M)*(pow(r,3))))+((-10279)*(pow(r,4))))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((49152)*(pow(a,24)))+(((14549535)*(pow(r,24)))+(((255255)*((pow(a,2))*((pow(r,21))*(((254)*(M))+((557)*(r))))))+(((3)*((pow(a,22))*((r)*(((1297118)*(M))+((845167)*(r))))))+(((3003)*((pow(a,4))*((pow(r,18))*(((31256)*(pow(M,2)))+(((184644)*((M)*(r)))+((208839)*(pow(r,2))))))))+(((pow(a,20))*((pow(r,2))*(((29571560)*(pow(M,2)))+(((68485100)*((M)*(r)))+((32039369)*(pow(r,2)))))))+(((429)*((pow(a,6))*((pow(r,15))*(((106688)*(pow(M,3)))+(((1590304)*((pow(M,2))*(r)))+(((4911738)*((M)*(pow(r,2))))+((3838869)*(pow(r,3)))))))))+(((pow(a,18))*((pow(r,3))*(((39568832)*(pow(M,3)))+(((295925728)*((pow(M,2))*(r)))+(((470931594)*((M)*(pow(r,2))))+((196700679)*(pow(r,3))))))))+(((286)*((pow(a,8))*((pow(r,12))*(((8960)*(pow(M,4)))+(((942272)*((pow(M,3))*(r)))+(((7522368)*((pow(M,2))*(pow(r,2))))+(((16344344)*((M)*(pow(r,3))))+((9992189)*(pow(r,4))))))))))+(((pow(a,16))*((pow(r,4))*(((3709440)*(pow(M,4)))+(((244831872)*((pow(M,3))*(r)))+(((1249040576)*((pow(M,2))*(pow(r,2))))+(((1770806352)*((M)*(pow(r,3))))+((722793771)*(pow(r,4)))))))))+(((26)*((pow(a,10))*((pow(r,9))*(((-14336)*(pow(M,5)))+(((430080)*((pow(M,4))*(r)))+(((25383840)*((pow(M,3))*(pow(r,2))))+(((147617680)*((pow(M,2))*(pow(r,3))))+(((257037690)*((M)*(pow(r,4))))+((132179979)*(pow(r,5)))))))))))+(((2)*((pow(a,14))*((pow(r,5))*(((-272384)*(pow(M,5)))+(((6737920)*((pow(M,4))*(r)))+(((314632480)*((pow(M,3))*(pow(r,2))))+(((1467564784)*((pow(M,2))*(pow(r,3))))+(((2072476826)*((M)*(pow(r,4))))+((874023017)*(pow(r,5)))))))))))+((2)*((pow(a,12))*((pow(r,6))*(((28672)*(pow(M,6)))+(((-458752)*((pow(M,5))*(r)))+(((9192960)*((pow(M,4))*(pow(r,2))))+(((430130560)*((pow(M,3))*(pow(r,3))))+(((2113742120)*((pow(M,2))*(pow(r,4))))+(((3203233572)*((M)*(pow(r,5))))+((1459336053)*(pow(r,6))))))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((45045)*((r)*((pow((pow(a,2))+(pow(r,2)),6))*((((323)*(pow(r,15)))+(((7)*((pow(a,14))*(((2)*(M))+(r))))+(((17)*((pow(a,2))*((pow(r,12))*(((110)*(M))+((97)*(r))))))+(((7)*((pow(a,12))*((r)*(((48)*(pow(M,2)))+(((60)*((M)*(r)))+((19)*(pow(r,2))))))))+(((3)*((pow(a,4))*((pow(r,9))*(((1296)*(pow(M,2)))+(((2444)*((M)*(r)))+((1157)*(pow(r,2))))))))+(((21)*((pow(a,10))*((pow(r,2))*(((64)*(pow(M,3)))+(((160)*((pow(M,2))*(r)))+(((138)*((M)*(pow(r,2))))+((39)*(pow(r,3)))))))))+(((pow(a,6))*((pow(r,6))*(((3392)*(pow(M,3)))+(((10464)*((pow(M,2))*(r)))+(((11154)*((M)*(pow(r,2))))+((3861)*(pow(r,3))))))))+((pow(a,8))*((pow(r,3))*(((1024)*(pow(M,4)))+(((4736)*((pow(M,3))*(r)))+(((9600)*((pow(M,2))*(pow(r,2))))+(((8184)*((M)*(pow(r,3))))+((2409)*(pow(r,4))))))))))))))))*(expr[3])))))))))))))))).cast<double>());
}
