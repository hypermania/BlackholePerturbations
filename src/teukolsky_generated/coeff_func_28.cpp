
#include "../teukolsky_scalar.hpp"
#include <map>

typedef TeukolskyScalarPDE::HighPrecisionScalar HighPrecisionScalar;


void compute_coeffs_140(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[140] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.8750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-7))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-4))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,4))+(((-3)*((pow(a,2))*((r)*((M)+(r)))))+((pow(r,2))*(((2)*(pow(M,2)))+(((11)*((M)*(r)))+((-6)*(pow(r,2))))))))*(((a)*((r)*(((15)*((pow(r,12))*(((-2)*(M))+(r))))+(((8)*((pow(a,12))*(((2)*(M))+(r))))+(((5)*((pow(a,2))*((pow(r,9))*(((-16)*(pow(M,2)))+(((-20)*((M)*(r)))+((17)*(pow(r,2))))))))+(((pow(a,10))*((r)*(((4)*(pow(M,2)))+(((100)*((M)*(r)))+((57)*(pow(r,2)))))))+(((-2)*((pow(a,4))*((pow(r,6))*(((12)*(pow(M,3)))+(((142)*((pow(M,2))*(r)))+(((34)*((M)*(pow(r,2))))+((-99)*(pow(r,3)))))))))+(((pow(a,8))*((pow(r,2))*(((-88)*(pow(M,3)))+(((-116)*((pow(M,2))*(r)))+(((194)*((M)*(pow(r,2))))+((163)*(pow(r,3))))))))+((2)*((pow(a,6))*((pow(r,3))*(((16)*(pow(M,4)))+(((-56)*((pow(M,3))*(r)))+(((-162)*((pow(M,2))*(pow(r,2))))+(((56)*((M)*(pow(r,3))))+((121)*(pow(r,4))))))))))))))))))+(((a)*((((8)*(pow(a,8)))+(((15)*(pow(r,8)))+(((5)*((pow(a,2))*((pow(r,5))*(((2)*(M))+((11)*(r))))))+(((pow(a,6))*((r)*(((18)*(M))+((41)*(r)))))+((pow(a,4))*((pow(r,2))*(((-8)*(pow(M,2)))+(((28)*((M)*(r)))+((73)*(pow(r,2)))))))))))*((pow(expr[0],2))*((pow(expr[1],2))*(pow(expr[2],2))))))+((-30)*((r)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))))).cast<double>());
}

void compute_coeffs_141(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[141] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-1.750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-5))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-3))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((8)*(pow(a,8)))+(((15)*(pow(r,8)))+(((5)*((pow(a,2))*((pow(r,5))*(((2)*(M))+((11)*(r))))))+(((pow(a,6))*((r)*(((18)*(M))+((41)*(r)))))+((pow(a,4))*((pow(r,2))*(((-8)*(pow(M,2)))+(((28)*((M)*(r)))+((73)*(pow(r,2)))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((15)*((r)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))))*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_142(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[142] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.8750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-7))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-4))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((8)*(pow(a,8)))+(((15)*(pow(r,8)))+(((5)*((pow(a,2))*((pow(r,5))*(((2)*(M))+((11)*(r))))))+(((pow(a,6))*((r)*(((18)*(M))+((41)*(r)))))+((pow(a,4))*((pow(r,2))*(((-8)*(pow(M,2)))+(((28)*((M)*(r)))+((73)*(pow(r,2)))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((15)*((r)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))))*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_143(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[143] = std::complex<double>(0.0,1.0)*(((7)*((pow(a,-6))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-4))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((8)*(pow(a,8)))+(((15)*(pow(r,8)))+(((5)*((pow(a,2))*((pow(r,5))*(((2)*(M))+((11)*(r))))))+(((pow(a,6))*((r)*(((18)*(M))+((41)*(r)))))+((pow(a,4))*((pow(r,2))*(((-8)*(pow(M,2)))+(((28)*((M)*(r)))+((73)*(pow(r,2)))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((15)*((r)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))))*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_144(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[144] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.06250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("3.316624790355399849114932736670686683927088545589353597058682146116484642609043846708843399128290651"))*((pow(a,-9))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-5))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,4))+(((-3)*((pow(a,2))*((r)*((M)+(r)))))+((pow(r,2))*(((2)*(pow(M,2)))+(((11)*((M)*(r)))+((-6)*(pow(r,2))))))))*(((a)*((r)*(((315)*((pow(r,16))*(((-2)*(M))+(r))))+(((32)*((pow(a,16))*(((2)*(M))+(r))))+(((315)*((pow(a,2))*((pow(r,13))*(((-8)*(pow(M,2)))+(((-8)*((M)*(r)))+((7)*(pow(r,2))))))))+(((pow(a,14))*((r)*(((860)*(pow(M,2)))+(((1372)*((M)*(r)))+((503)*(pow(r,2)))))))+(((-7)*((pow(a,4))*((pow(r,10))*(((392)*(pow(M,3)))+(((1572)*((pow(M,2))*(r)))+(((294)*((M)*(pow(r,2))))+((-949)*(pow(r,3)))))))))+(((pow(a,12))*((pow(r,2))*(((-1656)*(pow(M,3)))+(((2676)*((pow(M,2))*(r)))+(((6570)*((M)*(pow(r,2))))+((2665)*(pow(r,3))))))))+(((pow(a,10))*((pow(r,3))*(((-704)*(pow(M,4)))+(((-8032)*((pow(M,3))*(r)))+(((-576)*((pow(M,2))*(pow(r,2))))+(((13840)*((M)*(pow(r,3))))+((7215)*(pow(r,4)))))))))+(((pow(a,6))*((pow(r,7))*(((-384)*(pow(M,4)))+(((-10208)*((pow(M,3))*(r)))+(((-17796)*((pow(M,2))*(pow(r,2))))+(((5484)*((M)*(pow(r,3))))+((11197)*(pow(r,4)))))))))+((pow(a,8))*((pow(r,4))*(((128)*(pow(M,5)))+(((-1088)*((pow(M,4))*(r)))+(((-13840)*((pow(M,3))*(pow(r,2))))+(((-11704)*((pow(M,2))*(pow(r,3))))+(((14230)*((M)*(pow(r,4))))+((11465)*(pow(r,5))))))))))))))))))))+(((a)*((((32)*(pow(a,12)))+(((315)*(pow(r,12)))+(((315)*((pow(a,2))*((pow(r,9))*(((2)*(M))+((5)*(r))))))+(((pow(a,10))*((r)*(((494)*(M))+((439)*(r)))))+(((14)*((pow(a,4))*((pow(r,6))*(((8)*(pow(M,2)))+(((172)*((M)*(r)))+((227)*(pow(r,2))))))))+(((pow(a,8))*((pow(r,2))*(((160)*(pow(M,2)))+(((2136)*((M)*(r)))+((1755)*(pow(r,2)))))))+((pow(a,6))*(((-32)*((pow(M,3))*(pow(r,3))))+(((272)*((pow(M,2))*(pow(r,4))))+(((3420)*((M)*(pow(r,5))))+((3266)*(pow(r,6)))))))))))))*((pow(expr[0],2))*((pow(expr[1],2))*(pow(expr[2],2))))))+((-210)*((r)*((pow((pow(a,2))+(pow(r,2)),4))*((((3)*(pow(r,7)))+(((pow(a,6))*(((2)*(M))+(r)))+(((pow(a,2))*((pow(r,4))*(((10)*(M))+((7)*(r)))))+((pow(a,4))*((r)*(((8)*(pow(M,2)))+(((12)*((M)*(r)))+((5)*(pow(r,2))))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3]))))))))))))))))).cast<double>());
}
