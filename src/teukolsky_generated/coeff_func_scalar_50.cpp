
#include "../teukolsky.hpp"

namespace Teukolsky {

void compute_coeffs_scalar_250(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[250] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.1875000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-9))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-5))*((((3)*(pow(a,4)))+(((7)*(pow(r,4)))+((2)*((pow(a,2))*((r)*(((4)*(M))+((5)*(r))))))))*(((16)*(pow(a,11)))+(((105)*((a)*((pow(r,9))*(((-2)*(M))+(r)))))+(((pow(a,9))*((r)*(((134)*(M))+((163)*(r)))))+(((10)*((pow(a,3))*((pow(r,6))*(((-38)*(pow(M,2)))+(((-46)*((M)*(r)))+((43)*(pow(r,2))))))))+(((-4)*((pow(a,5))*((pow(r,3))*(((12)*(pow(M,3)))+(((172)*((pow(M,2))*(r)))+(((39)*((M)*(pow(r,2))))+((-169)*(pow(r,3)))))))))+(((pow(a,7))*(((-308)*((pow(M,2))*(pow(r,2))))+(((228)*((M)*(pow(r,3))))+((498)*(pow(r,4))))))+((-15)*((pow((pow(a,2))+(pow(r,2)),2))*((((3)*(pow(a,4)))+(((7)*(pow(r,4)))+((2)*((pow(a,2))*((r)*(((4)*(M))+((5)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_251(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[251] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("0.7500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-8))*((M)*((r)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-5))*((((3)*(pow(a,4)))+(((7)*(pow(r,4)))+((2)*((pow(a,2))*((r)*(((4)*(M))+((5)*(r))))))))*(((-16)*(pow(a,11)))+(((105)*((a)*((((2)*(M))+((-1)*(r)))*(pow(r,9)))))+(((-1)*((pow(a,9))*((r)*(((134)*(M))+((163)*(r))))))+(((10)*((pow(a,3))*((pow(r,6))*(((38)*(pow(M,2)))+(((46)*((M)*(r)))+((-43)*(pow(r,2))))))))+(((-2)*((pow(a,7))*((pow(r,2))*(((-154)*(pow(M,2)))+(((114)*((M)*(r)))+((249)*(pow(r,2))))))))+(((4)*((pow(a,5))*((pow(r,3))*(((12)*(pow(M,3)))+(((172)*((pow(M,2))*(r)))+(((39)*((M)*(pow(r,2))))+((-169)*(pow(r,3)))))))))+((15)*((pow((pow(a,2))+(pow(r,2)),2))*((((3)*(pow(a,4)))+(((7)*(pow(r,4)))+((2)*((pow(a,2))*((r)*(((4)*(M))+((5)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3]))))))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_252(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[252] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.01562500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("0.7464200272921789327684895627734299784925191931283115959083948141392236061114902086988149554958611532"))*((pow(a,-11))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-6))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((6)*(pow(a,8)))+(((-1)*((pow(a,6))*((r)*(((2)*(M))+((31)*(r))))))+(((14)*((pow(r,6))*(((2)*(pow(M,2)))+(((19)*((M)*(r)))+((-10)*(pow(r,2)))))))+(((-2)*((pow(a,4))*((pow(r,2))*(((18)*(pow(M,2)))+(((41)*((M)*(r)))+((108)*(pow(r,2))))))))+((pow(a,2))*((pow(r,3))*(((32)*(pow(M,3)))+(((344)*((pow(M,2))*(r)))+(((178)*((M)*(pow(r,2))))+((-319)*(pow(r,3))))))))))))*((expr[2])*(((a)*((((128)*(pow(a,12)))+(((3465)*(pow(r,12)))+(((105)*((pow(a,2))*((pow(r,9))*(((94)*(M))+((151)*(r))))))+(((3)*((pow(a,10))*((r)*(((1186)*(M))+((849)*(r))))))+(((42)*((pow(a,4))*((pow(r,6))*(((156)*(pow(M,2)))+(((784)*((M)*(r)))+((689)*(pow(r,2))))))))+(((3)*((pow(a,8))*((pow(r,2))*(((2024)*(pow(M,2)))+(((6768)*((M)*(r)))+((4111)*(pow(r,2))))))))+((2)*((pow(a,6))*((pow(r,3))*(((160)*(pow(M,3)))+(((6312)*((pow(M,2))*(r)))+(((19902)*((M)*(pow(r,2))))+((13231)*(pow(r,3)))))))))))))))*((((pow(r,4))*(((-2)*(M))+(r)))+(((pow(a,4))*(((2)*(M))+(r)))+(((pow(a,2))*(((-4)*((pow(M,2))*(r)))+((2)*(pow(r,3)))))+((pow(expr[0],2))*(pow(expr[1],2))))))*(expr[2]))))+((-210)*((r)*((pow((pow(a,2))+(pow(r,2)),2))*((((33)*(pow(r,11)))+(((5)*((pow(a,10))*(((2)*(M))+(r))))+(((5)*((pow(a,8))*((r)*(pow(((4)*(M))+((3)*(r)),2)))))+(((3)*((pow(a,2))*((pow(r,8))*(((46)*(M))+((43)*(r))))))+(((2)*((pow(a,4))*((pow(r,5))*(((88)*(pow(M,2)))+(((188)*((M)*(r)))+((97)*(pow(r,2))))))))+((2)*((pow(a,6))*((pow(r,2))*(((32)*(pow(M,3)))+(((128)*((pow(M,2))*(r)))+(((174)*((M)*(pow(r,2))))+((69)*(pow(r,3))))))))))))))*((expr[0])*((expr[1])*(expr[3])))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_253(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[253] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.06250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("0.7464200272921789327684895627734299784925191931283115959083948141392236061114902086988149554958611532"))*((pow(a,-9))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-5))*((((3)*(pow(a,4)))+(((7)*(pow(r,4)))+((2)*((pow(a,2))*((r)*(((4)*(M))+((5)*(r))))))))*((expr[2])*(((((128)*(pow(a,15)))+(((3465)*((a)*((pow(r,13))*(((-2)*(M))+(r)))))+(((pow(a,13))*((r)*(((3302)*(M))+((2675)*(r)))))+(((420)*((pow(a,3))*((pow(r,10))*(((-47)*(pow(M,2)))+(((-52)*((M)*(r)))+((46)*(pow(r,2))))))))+(((12)*((pow(a,11))*((pow(r,2))*(((-87)*(pow(M,2)))+(((1564)*((M)*(r)))+((1240)*(pow(r,2))))))))+(((-21)*((pow(a,5))*((pow(r,7))*(((624)*(pow(M,3)))+(((2824)*((pow(M,2))*(r)))+(((718)*((M)*(pow(r,2))))+((-2133)*(pow(r,3)))))))))+(((pow(a,9))*((pow(r,3))*(((-11824)*(pow(M,3)))+(((-21912)*((pow(M,2))*(r)))+(((35442)*((M)*(pow(r,2))))+((38795)*(pow(r,3))))))))+((8)*((pow(a,7))*((pow(r,4))*(((-80)*(pow(M,4)))+(((-3116)*((pow(M,3))*(r)))+(((-7554)*((pow(M,2))*(pow(r,2))))+(((2476)*((M)*(pow(r,3))))+((6925)*(pow(r,4)))))))))))))))))*(expr[2]))+((-105)*((r)*((pow((pow(a,2))+(pow(r,2)),2))*((((5)*(pow(a,8)))+(((33)*(pow(r,8)))+(((40)*((pow(a,6))*((r)*((M)+(r)))))+(((24)*((pow(a,2))*((pow(r,5))*(((3)*(M))+((4)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(pow(((4)*(M))+((7)*(r)),2)))))))))*((expr[0])*((expr[1])*(expr[3]))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_254(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[254] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.03125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("0.7464200272921789327684895627734299784925191931283115959083948141392236061114902086988149554958611532"))*((pow(a,-11))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-6))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*((((3)*(pow(a,4)))+(((7)*(pow(r,4)))+((2)*((pow(a,2))*((r)*(((4)*(M))+((5)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((128)*(pow(a,12)))+(((3465)*(pow(r,12)))+(((105)*((pow(a,2))*((pow(r,9))*(((94)*(M))+((151)*(r))))))+(((3)*((pow(a,10))*((r)*(((1186)*(M))+((849)*(r))))))+(((42)*((pow(a,4))*((pow(r,6))*(((156)*(pow(M,2)))+(((784)*((M)*(r)))+((689)*(pow(r,2))))))))+(((3)*((pow(a,8))*((pow(r,2))*(((2024)*(pow(M,2)))+(((6768)*((M)*(r)))+((4111)*(pow(r,2))))))))+((2)*((pow(a,6))*((pow(r,3))*(((160)*(pow(M,3)))+(((6312)*((pow(M,2))*(r)))+(((19902)*((M)*(pow(r,2))))+((13231)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((105)*((r)*((pow((pow(a,2))+(pow(r,2)),2))*((((33)*(pow(r,11)))+(((5)*((pow(a,10))*(((2)*(M))+(r))))+(((5)*((pow(a,8))*((r)*(pow(((4)*(M))+((3)*(r)),2)))))+(((3)*((pow(a,2))*((pow(r,8))*(((46)*(M))+((43)*(r))))))+(((2)*((pow(a,4))*((pow(r,5))*(((88)*(pow(M,2)))+(((188)*((M)*(r)))+((97)*(pow(r,2))))))))+((2)*((pow(a,6))*((pow(r,2))*(((32)*(pow(M,3)))+(((128)*((pow(M,2))*(r)))+(((174)*((M)*(pow(r,2))))+((69)*(pow(r,3))))))))))))))*(expr[3])))))))))))))))).cast<double>());
}

}
