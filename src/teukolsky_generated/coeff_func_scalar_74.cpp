
#include "../teukolsky.hpp"

namespace Teukolsky {

void compute_coeffs_scalar_370(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[370] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("0.3437500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-10))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-6))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,8))+(((21)*(pow(r,8)))+(((56)*((pow(a,2))*((pow(r,5))*((M)+(r)))))+(((8)*((pow(a,6))*((r)*(((3)*(M))+((2)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(pow(((4)*(M))+((5)*(r)),2)))))))))*(((a)*((r)*(((315)*((((2)*(M))+((-1)*(r)))*(pow(r,12))))+(((-113)*((pow(a,12))*(((2)*(M))+(r))))+(((420)*((pow(a,2))*((pow(r,9))*(((5)*(pow(M,2)))+(((4)*((M)*(r)))+((-4)*(pow(r,2))))))))+(((-4)*((pow(a,10))*((r)*(((81)*(pow(M,2)))+(((420)*((M)*(r)))+((218)*(pow(r,2))))))))+(((pow(a,4))*((pow(r,6))*(((1744)*(pow(M,3)))+(((5784)*((pow(M,2))*(r)))+(((258)*((M)*(pow(r,2))))+((-3683)*(pow(r,3))))))))+(((3)*((pow(a,8))*((pow(r,2))*(((496)*(pow(M,3)))+(((312)*((pow(M,2))*(r)))+(((-1298)*((M)*(pow(r,2))))+((-891)*(pow(r,3)))))))))+((8)*((pow(a,6))*((pow(r,3))*(((16)*(pow(M,4)))+(((404)*((pow(M,3))*(r)))+(((618)*((pow(M,2))*(pow(r,2))))+(((-404)*((M)*(pow(r,3))))+((-529)*(pow(r,4))))))))))))))))))+((15)*((pow((pow(a,2))+(pow(r,2)),2))*(((pow(a,8))+(((21)*(pow(r,8)))+(((56)*((pow(a,2))*((pow(r,5))*((M)+(r)))))+(((8)*((pow(a,6))*((r)*(((3)*(M))+((2)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(pow(((4)*(M))+((5)*(r)),2)))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_371(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[371] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("-0.02343750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("1.253566341056017437200912615345187080125125261079214798703956518540394949459900897382241879581243679"))*((pow(a,-12))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-7))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,8))+(((21)*(pow(r,8)))+(((56)*((pow(a,2))*((pow(r,5))*((M)+(r)))))+(((8)*((pow(a,6))*((r)*(((3)*(M))+((2)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(pow(((4)*(M))+((5)*(r)),2)))))))))*(((-1)*((a)*((r)*(((-15015)*((((2)*(M))+((-1)*(r)))*(pow(r,16))))+(((1873)*((pow(a,16))*(((2)*(M))+(r))))+(((770)*((pow(a,2))*((pow(r,13))*(((-170)*(pow(M,2)))+(((-142)*((M)*(r)))+((133)*(pow(r,2))))))))+(((2)*((pow(a,14))*((r)*(((13562)*(pow(M,2)))+(((28546)*((M)*(r)))+((11819)*(pow(r,2))))))))+(((-14)*((pow(a,4))*((pow(r,10))*(((12776)*(pow(M,3)))+(((36936)*((pow(M,2))*(r)))+(((4192)*((M)*(pow(r,2))))+((-21507)*(pow(r,3)))))))))+(((2)*((pow(a,12))*((pow(r,2))*(((-16984)*(pow(M,3)))+(((55896)*((pow(M,2))*(r)))+(((134640)*((M)*(pow(r,2))))+((58715)*(pow(r,3)))))))))+(((2)*((pow(a,6))*((pow(r,7))*(((-37824)*(pow(M,4)))+(((-282080)*((pow(M,3))*(r)))+(((-367746)*((pow(M,2))*(pow(r,2))))+(((150078)*((M)*(pow(r,3))))+((248369)*(pow(r,4))))))))))+(((-4)*((pow(a,8))*((pow(r,4))*(((640)*(pow(M,5)))+(((36224)*((pow(M,4))*(r)))+(((156424)*((pow(M,3))*(pow(r,2))))+(((96432)*((pow(M,2))*(pow(r,3))))+(((-163875)*((M)*(pow(r,4))))+((-125130)*(pow(r,5)))))))))))+((pow(a,10))*(((-69248)*((pow(M,4))*(pow(r,3))))+(((-274368)*((pow(M,3))*(pow(r,4))))+(((48228)*((pow(M,2))*(pow(r,5))))+(((591900)*((M)*(pow(r,6))))+((313150)*(pow(r,7)))))))))))))))))))+((35)*((pow((pow(a,2))+(pow(r,2)),2))*((((5)*(pow(a,12)))+(((429)*(pow(r,12)))+(((30)*((pow(a,10))*((r)*(((8)*(M))+((5)*(r))))))+(((198)*((pow(a,2))*((pow(r,9))*(((8)*(M))+((9)*(r))))))+(((15)*((pow(a,8))*((pow(r,2))*(((64)*(pow(M,2)))+(((128)*((M)*(r)))+((61)*(pow(r,2))))))))+(((9)*((pow(a,4))*((pow(r,6))*(((192)*(pow(M,2)))+(((512)*((M)*(r)))+((323)*(pow(r,2))))))))+((4)*((pow(a,6))*((pow(r,3))*(((128)*(pow(M,3)))+(((672)*((pow(M,2))*(r)))+(((1176)*((M)*(pow(r,2))))+((581)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3]))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_372(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[372] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("0.0002790178571428571428571428571428571428571428571428571428571428571428571428571428571428571428571428571"))*((HighPrecisionScalar("8.346656017032609608959377059234941704085238203673191974468735731010716950031073753239238367326762381"))*((pow(a,-14))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-8))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,8))+(((21)*(pow(r,8)))+(((56)*((pow(a,2))*((pow(r,5))*((M)+(r)))))+(((8)*((pow(a,6))*((r)*(((3)*(M))+((2)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(pow(((4)*(M))+((5)*(r)),2)))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((30563)*(pow(a,16)))+(((765765)*(pow(r,16)))+(((30030)*((pow(a,2))*((pow(r,13))*(((86)*(M))+((161)*(r))))))+(((2)*((pow(a,14))*((r)*(((270778)*(M))+((257641)*(r))))))+(((6006)*((pow(a,4))*((pow(r,10))*(((432)*(pow(M,2)))+(((2148)*((M)*(r)))+((2173)*(pow(r,2))))))))+(((6)*((pow(a,12))*((pow(r,2))*(((249104)*(pow(M,2)))+(((790660)*((M)*(r)))+((520811)*(pow(r,2))))))))+(((198)*((pow(a,6))*((pow(r,7))*(((3776)*(pow(M,3)))+(((46752)*((pow(M,2))*(r)))+(((132962)*((M)*(pow(r,2))))+((98809)*(pow(r,3)))))))))+(((2)*((pow(a,10))*((pow(r,3))*(((359488)*(pow(M,3)))+(((3528480)*((pow(M,2))*(r)))+(((8067846)*((M)*(pow(r,2))))+((4864837)*(pow(r,3)))))))))+((8)*((pow(a,8))*((pow(r,4))*(((1792)*(pow(M,4)))+(((183328)*((pow(M,3))*(r)))+(((1528080)*((pow(M,2))*(pow(r,2))))+(((3492682)*((M)*(pow(r,3))))+((2208967)*(pow(r,4))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((315)*((pow((pow(a,2))+(pow(r,2)),2))*((((7)*(pow(a,16)))+(((2431)*(pow(r,16)))+(((112)*((pow(a,14))*((r)*(((5)*(M))+((3)*(r))))))+(((2288)*((pow(a,2))*((pow(r,13))*(((5)*(M))+((6)*(r))))))+(((572)*((pow(a,4))*((pow(r,10))*(((32)*(pow(M,2)))+(((88)*((M)*(r)))+((57)*(pow(r,2))))))))+(((28)*((pow(a,12))*((pow(r,2))*(((160)*(pow(M,2)))+(((280)*((M)*(r)))+((117)*(pow(r,2))))))))+(((112)*((pow(a,10))*((pow(r,3))*(((64)*(pow(M,3)))+(((256)*((pow(M,2))*(r)))+(((323)*((M)*(pow(r,2))))+((124)*(pow(r,3)))))))))+(((176)*((pow(a,6))*((pow(r,7))*(((64)*(pow(M,3)))+(((320)*((pow(M,2))*(r)))+(((503)*((M)*(pow(r,2))))+((239)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((1024)*(pow(M,4)))+(((9216)*((pow(M,3))*(r)))+(((31104)*((pow(M,2))*(pow(r,2))))+(((39264)*((M)*(pow(r,3))))+((15849)*(pow(r,4))))))))))))))))))*(expr[3]))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_373(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[373] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("2.750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-10))*((M)*((r)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-6))*(((pow(a,4))+(((3)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+(r)))))))*((expr[0])*(((((32)*(pow(a,13)))+(((315)*((a)*(pow(r,12))))+(((315)*((pow(a,3))*((pow(r,9))*(((2)*(M))+((5)*(r))))))+(((pow(a,11))*((r)*(((494)*(M))+((439)*(r)))))+(((14)*((pow(a,5))*((pow(r,6))*(((8)*(pow(M,2)))+(((172)*((M)*(r)))+((227)*(pow(r,2))))))))+(((pow(a,9))*((pow(r,2))*(((160)*(pow(M,2)))+(((2136)*((M)*(r)))+((1755)*(pow(r,2)))))))+((pow(a,7))*(((-32)*((pow(M,3))*(pow(r,3))))+(((272)*((pow(M,2))*(pow(r,4))))+(((3420)*((M)*(pow(r,5))))+((3266)*(pow(r,6)))))))))))))*(expr[0]))+((-105)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(a,4))+(((3)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+(r)))))))*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_374(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[374] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("0.06250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("1.354006400772660060076647261377673391417367347787552137941929265755486133806778782499859600491322813"))*((pow(a,-12))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-7))*(((pow(a,4))+(((3)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+(r)))))))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((1024)*(pow(a,16)))+(((45045)*(pow(r,16)))+(((1155)*((pow(a,2))*((pow(r,13))*(((122)*(M))+((251)*(r))))))+(((pow(a,14))*((r)*(((37654)*(M))+((27019)*(r)))))+(((21)*((pow(a,4))*((pow(r,10))*(((5256)*(pow(M,2)))+(((35004)*((M)*(r)))+((37889)*(pow(r,2))))))))+(((3)*((pow(a,12))*((pow(r,2))*(((31832)*(pow(M,2)))+(((107140)*((M)*(r)))+((61445)*(pow(r,2))))))))+(((9)*((pow(a,6))*((pow(r,7))*(((960)*(pow(M,3)))+(((47616)*((pow(M,2))*(r)))+(((174250)*((M)*(pow(r,2))))+((134161)*(pow(r,3)))))))))+(((pow(a,10))*((pow(r,3))*(((11200)*(pow(M,3)))+(((398784)*((pow(M,2))*(r)))+(((1050690)*((M)*(pow(r,2))))+((597355)*(pow(r,3))))))))+((pow(a,8))*((pow(r,4))*(((-1280)*(pow(M,4)))+(((19840)*((pow(M,3))*(r)))+(((621456)*((pow(M,2))*(pow(r,2))))+(((1741000)*((M)*(pow(r,3))))+((1095655)*(pow(r,4)))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((315)*((r)*((pow((pow(a,2))+(pow(r,2)),4))*((((143)*(pow(r,11)))+(((15)*((pow(a,10))*(((2)*(M))+(r))))+(((11)*((pow(a,2))*((pow(r,8))*(((58)*(M))+((49)*(r))))))+(((5)*((pow(a,8))*((r)*(((64)*(pow(M,2)))+(((88)*((M)*(r)))+((31)*(pow(r,2))))))))+(((2)*((pow(a,4))*((pow(r,5))*(((448)*(pow(M,2)))+(((828)*((M)*(r)))+((387)*(pow(r,2))))))))+((2)*((pow(a,6))*((pow(r,2))*(((192)*(pow(M,3)))+(((608)*((pow(M,2))*(r)))+(((714)*((M)*(pow(r,2))))+((259)*(pow(r,3))))))))))))))*(expr[3])))))))))))))))).cast<double>());
}

}
