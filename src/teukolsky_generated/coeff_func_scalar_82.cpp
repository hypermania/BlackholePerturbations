
#include "../teukolsky.hpp"

namespace Teukolsky {

void compute_coeffs_scalar_410(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[410] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.01015625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-13))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-7))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,8))+(((17)*((pow(a,6))*((M)*(r))))+(((11)*((pow(r,6))*(((2)*(pow(M,2)))+(((41)*((M)*(r)))+((-21)*(pow(r,2)))))))+(((-1)*((pow(a,4))*((pow(r,2))*(((58)*(pow(M,2)))+(((235)*((M)*(r)))+((154)*(pow(r,2))))))))+((pow(a,2))*((pow(r,3))*(((40)*(pow(M,3)))+(((844)*((pow(M,2))*(r)))+(((39)*((M)*(pow(r,2))))+((-384)*(pow(r,3))))))))))))*(((a)*((r)*(((3465)*((pow(r,20))*(((-2)*(M))+(r))))+(((2245)*((pow(a,20))*(((2)*(M))+(r))))+(((210)*((pow(a,2))*((pow(r,17))*(((-82)*(pow(M,2)))+(((-248)*((M)*(r)))+((161)*(pow(r,2))))))))+(((10)*((pow(a,18))*((r)*(((-194)*(pow(M,2)))+(((4296)*((M)*(r)))+((2421)*(pow(r,2))))))))+(((-21)*((pow(a,4))*((pow(r,14))*(((224)*(pow(M,3)))+(((6224)*((pow(M,2))*(r)))+(((7638)*((M)*(pow(r,2))))+((-7053)*(pow(r,3)))))))))+(((pow(a,16))*((pow(r,2))*(((-19936)*(pow(M,3)))+(((-45424)*((pow(M,2))*(r)))+(((169638)*((M)*(pow(r,2))))+((116133)*(pow(r,3))))))))+(((24)*((pow(a,6))*((pow(r,11))*(((104)*(pow(M,4)))+(((-1384)*((pow(M,3))*(r)))+(((-17876)*((pow(M,2))*(pow(r,2))))+(((-10048)*((M)*(pow(r,3))))+((15977)*(pow(r,4))))))))))+(((8)*((pow(a,14))*((pow(r,3))*(((1912)*(pow(M,4)))+(((-11128)*((pow(M,3))*(r)))+(((-30088)*((pow(M,2))*(pow(r,2))))+(((44624)*((M)*(pow(r,3))))+((40891)*(pow(r,4))))))))))+(((-2)*((pow(a,8))*((pow(r,8))*(((1024)*(pow(M,5)))+(((-7552)*((pow(M,4))*(r)))+(((50320)*((pow(M,3))*(pow(r,2))))+(((395560)*((pow(M,2))*(pow(r,3))))+(((58490)*((M)*(pow(r,4))))+((-324665)*(pow(r,5)))))))))))+(((2)*((pow(a,12))*((pow(r,4))*(((-4096)*(pow(M,5)))+(((20352)*((pow(M,4))*(r)))+(((-83280)*((pow(M,3))*(pow(r,2))))+(((-304600)*((pow(M,2))*(pow(r,3))))+(((206130)*((M)*(pow(r,4))))+((300165)*(pow(r,5)))))))))))+((4)*((pow(a,10))*((pow(r,5))*(((512)*(pow(M,6)))+(((-2560)*((pow(M,5))*(r)))+(((9504)*((pow(M,4))*(pow(r,2))))+(((-42400)*((pow(M,3))*(pow(r,3))))+(((-221890)*((pow(M,2))*(pow(r,4))))+(((48840)*((M)*(pow(r,5))))+((187755)*(pow(r,6))))))))))))))))))))))))+((-315)*((pow((pow(a,2))+(pow(r,2)),8))*(((pow(a,4))+(((11)*(pow(r,4)))+((4)*((pow(a,2))*((r)*(((5)*(M))+((3)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_411(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[411] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.01015625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-11))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-6))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,4))+(((11)*(pow(r,4)))+((4)*((pow(a,2))*((r)*(((5)*(M))+((3)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((2245)*(pow(a,16)))+(((3465)*(pow(r,16)))+(((1680)*((pow(a,2))*((pow(r,13))*((M)+((16)*(r))))))+(((40)*((pow(a,14))*((r)*(((88)*(M))+((493)*(r))))))+(((168)*((pow(a,4))*((pow(r,10))*(((-6)*(pow(M,2)))+(((66)*((M)*(r)))+((541)*(pow(r,2))))))))+(((48)*((pow(a,12))*((pow(r,2))*(((-61)*(pow(M,2)))+(((379)*((M)*(r)))+((1551)*(pow(r,2))))))))+(((24)*((pow(a,6))*((pow(r,7))*(((32)*(pow(M,3)))+(((-216)*((pow(M,2))*(r)))+(((1284)*((M)*(pow(r,2))))+((7283)*(pow(r,3)))))))))+(((16)*((pow(a,10))*((pow(r,3))*(((112)*(pow(M,3)))+(((-564)*((pow(M,2))*(r)))+(((2469)*((M)*(pow(r,2))))+((9907)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((-256)*(pow(M,4)))+(((1280)*((pow(M,3))*(r)))+(((-5136)*((pow(M,2))*(pow(r,2))))+(((23120)*((M)*(pow(r,3))))+((104429)*(pow(r,4))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((315)*((pow((pow(a,2))+(pow(r,2)),8))*(((pow(a,4))+(((11)*(pow(r,4)))+((4)*((pow(a,2))*((r)*(((5)*(M))+((3)*(r))))))))*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_412(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[412] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.005078125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-13))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-7))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*(((pow(a,4))+(((11)*(pow(r,4)))+((4)*((pow(a,2))*((r)*(((5)*(M))+((3)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((2245)*(pow(a,16)))+(((3465)*(pow(r,16)))+(((1680)*((pow(a,2))*((pow(r,13))*((M)+((16)*(r))))))+(((40)*((pow(a,14))*((r)*(((88)*(M))+((493)*(r))))))+(((168)*((pow(a,4))*((pow(r,10))*(((-6)*(pow(M,2)))+(((66)*((M)*(r)))+((541)*(pow(r,2))))))))+(((48)*((pow(a,12))*((pow(r,2))*(((-61)*(pow(M,2)))+(((379)*((M)*(r)))+((1551)*(pow(r,2))))))))+(((24)*((pow(a,6))*((pow(r,7))*(((32)*(pow(M,3)))+(((-216)*((pow(M,2))*(r)))+(((1284)*((M)*(pow(r,2))))+((7283)*(pow(r,3)))))))))+(((16)*((pow(a,10))*((pow(r,3))*(((112)*(pow(M,3)))+(((-564)*((pow(M,2))*(r)))+(((2469)*((M)*(pow(r,2))))+((9907)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((-256)*(pow(M,4)))+(((1280)*((pow(M,3))*(r)))+(((-5136)*((pow(M,2))*(pow(r,2))))+(((23120)*((M)*(pow(r,3))))+((104429)*(pow(r,4))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((315)*((pow((pow(a,2))+(pow(r,2)),8))*(((pow(a,4))+(((11)*(pow(r,4)))+((4)*((pow(a,2))*((r)*(((5)*(M))+((3)*(r))))))))*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_413(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[413] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("-0.08125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-12))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-7))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,4))+(((11)*(pow(r,4)))+((4)*((pow(a,2))*((r)*(((5)*(M))+((3)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((2245)*(pow(a,16)))+(((3465)*(pow(r,16)))+(((1680)*((pow(a,2))*((pow(r,13))*((M)+((16)*(r))))))+(((40)*((pow(a,14))*((r)*(((88)*(M))+((493)*(r))))))+(((168)*((pow(a,4))*((pow(r,10))*(((-6)*(pow(M,2)))+(((66)*((M)*(r)))+((541)*(pow(r,2))))))))+(((48)*((pow(a,12))*((pow(r,2))*(((-61)*(pow(M,2)))+(((379)*((M)*(r)))+((1551)*(pow(r,2))))))))+(((24)*((pow(a,6))*((pow(r,7))*(((32)*(pow(M,3)))+(((-216)*((pow(M,2))*(r)))+(((1284)*((M)*(pow(r,2))))+((7283)*(pow(r,3)))))))))+(((16)*((pow(a,10))*((pow(r,3))*(((112)*(pow(M,3)))+(((-564)*((pow(M,2))*(r)))+(((2469)*((M)*(pow(r,2))))+((9907)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((-256)*(pow(M,4)))+(((1280)*((pow(M,3))*(r)))+(((-5136)*((pow(M,2))*(pow(r,2))))+(((23120)*((M)*(pow(r,3))))+((104429)*(pow(r,4))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((315)*((pow((pow(a,2))+(pow(r,2)),8))*(((pow(a,4))+(((11)*(pow(r,4)))+((4)*((pow(a,2))*((r)*(((5)*(M))+((3)*(r))))))))*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_414(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[414] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.0001953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("4.482288376589472730161464179664940922968432407180351338182777341837714446493455019848599318961585480"))*((pow(a,-15))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-8))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,8))+(((17)*((pow(a,6))*((M)*(r))))+(((11)*((pow(r,6))*(((2)*(pow(M,2)))+(((41)*((M)*(r)))+((-21)*(pow(r,2)))))))+(((-1)*((pow(a,4))*((pow(r,2))*(((58)*(pow(M,2)))+(((235)*((M)*(r)))+((154)*(pow(r,2))))))))+((pow(a,2))*((pow(r,3))*(((40)*(pow(M,3)))+(((844)*((pow(M,2))*(r)))+(((39)*((M)*(pow(r,2))))+((-384)*(pow(r,3))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((37495)*(pow(a,20)))+(((225225)*(pow(r,20)))+(((60060)*((pow(a,2))*((pow(r,17))*(((7)*(M))+((34)*(r))))))+(((20)*((pow(a,18))*((r)*(((16029)*(M))+((26762)*(r))))))+(((1155)*((pow(a,4))*((pow(r,14))*(((64)*(pow(M,2)))+(((2848)*((M)*(r)))+((7153)*(pow(r,2))))))))+(((pow(a,16))*((pow(r,2))*(((133952)*(pow(M,2)))+(((2698592)*((M)*(r)))+((3163373)*(pow(r,2)))))))+(((528)*((pow(a,6))*((pow(r,11))*(((-48)*(pow(M,3)))+(((912)*((pow(M,2))*(r)))+(((21279)*((M)*(pow(r,2))))+((37141)*(pow(r,3)))))))))+(((16)*((pow(a,14))*((pow(r,3))*(((-3632)*(pow(M,3)))+(((44784)*((pow(M,2))*(r)))+(((616895)*((M)*(pow(r,2))))+((658155)*(pow(r,3)))))))))+(((22)*((pow(a,8))*((pow(r,8))*(((512)*(pow(M,4)))+(((-5632)*((pow(M,3))*(r)))+(((59808)*((pow(M,2))*(pow(r,2))))+(((994160)*((M)*(pow(r,3))))+((1371815)*(pow(r,4))))))))))+(((2)*((pow(a,12))*((pow(r,4))*(((10752)*(pow(M,4)))+(((-94720)*((pow(M,3))*(r)))+(((802848)*((pow(M,2))*(pow(r,2))))+(((10257360)*((M)*(pow(r,3))))+((11113235)*(pow(r,4))))))))))+((8)*((pow(a,10))*((pow(r,5))*(((-512)*(pow(M,5)))+(((4096)*((pow(M,4))*(r)))+(((-28736)*((pow(M,3))*(pow(r,2))))+(((241408)*((pow(M,2))*(pow(r,3))))+(((3315955)*((M)*(pow(r,4))))+((3922000)*(pow(r,5)))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((3465)*((pow((pow(a,2))+(pow(r,2)),8))*(((pow(a,8))+(((65)*(pow(r,8)))+(((52)*((pow(a,2))*((pow(r,5))*(((4)*(M))+((3)*(r))))))+(((4)*((pow(a,6))*((r)*(((12)*(M))+((7)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(((80)*(pow(M,2)))+(((128)*((M)*(r)))+((59)*(pow(r,2))))))))))))*(expr[3]))))))))))))))).cast<double>());
}

}
