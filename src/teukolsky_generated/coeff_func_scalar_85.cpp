
#include "../teukolsky.hpp"

namespace Teukolsky {

void compute_coeffs_scalar_425(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[425] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.01692708333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"))*((pow(a,-13))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-7))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*((((3)*(pow(a,4)))+(((11)*(pow(r,4)))+((2)*((pow(a,2))*((r)*(((8)*(M))+((7)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((256)*(pow(a,16)))+(((3465)*(pow(r,16)))+(((105)*((pow(a,2))*((pow(r,13))*(((70)*(M))+((229)*(r))))))+(((pow(a,14))*((r)*(((5278)*(M))+((4687)*(r)))))+(((21)*((pow(a,4))*((pow(r,10))*(((72)*(pow(M,2)))+(((2028)*((M)*(r)))+((3413)*(pow(r,2))))))))+(((3)*((pow(a,12))*((pow(r,2))*(((920)*(pow(M,2)))+(((11476)*((M)*(r)))+((8777)*(pow(r,2))))))))+(((9)*((pow(a,6))*((pow(r,7))*(((-64)*(pow(M,3)))+(((768)*((pow(M,2))*(r)))+(((11362)*((M)*(pow(r,2))))+((13245)*(pow(r,3)))))))))+(((pow(a,10))*((pow(r,3))*(((-1088)*(pow(M,3)))+(((9408)*((pow(M,2))*(r)))+(((92154)*((M)*(pow(r,2))))+((73759)*(pow(r,3))))))))+((pow(a,8))*((pow(r,4))*(((256)*(pow(M,4)))+(((-1664)*((pow(M,3))*(r)))+(((12048)*((pow(M,2))*(pow(r,2))))+(((130024)*((M)*(pow(r,3))))+((119971)*(pow(r,4)))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((315)*((r)*((pow((pow(a,2))+(pow(r,2)),6))*((((11)*(pow(r,7)))+(((3)*((pow(a,6))*(((2)*(M))+(r))))+(((pow(a,2))*((pow(r,4))*(((38)*(M))+((25)*(r)))))+((pow(a,4))*((r)*(((32)*(pow(M,2)))+(((44)*((M)*(r)))+((17)*(pow(r,2))))))))))*(expr[3]))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_426(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[426] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("0.2031250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-12))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-7))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((3)*(pow(a,4)))+(((11)*(pow(r,4)))+((2)*((pow(a,2))*((r)*(((8)*(M))+((7)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((256)*(pow(a,16)))+(((3465)*(pow(r,16)))+(((105)*((pow(a,2))*((pow(r,13))*(((70)*(M))+((229)*(r))))))+(((pow(a,14))*((r)*(((5278)*(M))+((4687)*(r)))))+(((21)*((pow(a,4))*((pow(r,10))*(((72)*(pow(M,2)))+(((2028)*((M)*(r)))+((3413)*(pow(r,2))))))))+(((3)*((pow(a,12))*((pow(r,2))*(((920)*(pow(M,2)))+(((11476)*((M)*(r)))+((8777)*(pow(r,2))))))))+(((9)*((pow(a,6))*((pow(r,7))*(((-64)*(pow(M,3)))+(((768)*((pow(M,2))*(r)))+(((11362)*((M)*(pow(r,2))))+((13245)*(pow(r,3)))))))))+(((pow(a,10))*((pow(r,3))*(((-1088)*(pow(M,3)))+(((9408)*((pow(M,2))*(r)))+(((92154)*((M)*(pow(r,2))))+((73759)*(pow(r,3))))))))+((pow(a,8))*((pow(r,4))*(((256)*(pow(M,4)))+(((-1664)*((pow(M,3))*(r)))+(((12048)*((pow(M,2))*(pow(r,2))))+(((130024)*((M)*(pow(r,3))))+((119971)*(pow(r,4)))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((315)*((r)*((pow((pow(a,2))+(pow(r,2)),6))*((((11)*(pow(r,7)))+(((3)*((pow(a,6))*(((2)*(M))+(r))))+(((pow(a,2))*((pow(r,4))*(((38)*(M))+((25)*(r)))))+((pow(a,4))*((r)*(((32)*(pow(M,2)))+(((44)*((M)*(r)))+((17)*(pow(r,2))))))))))*(expr[3]))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_427(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[427] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.0006510416666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667"))*((HighPrecisionScalar("3.169456506320057621015200273690809860047526474937208270233125244411137145633781465045978177906890608"))*((pow(a,-15))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-8))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((6)*(pow(a,8)))+(((pow(a,6))*((((14)*(M))+((-65)*(r)))*(r)))+(((22)*((pow(r,6))*(((2)*(pow(M,2)))+(((41)*((M)*(r)))+((-21)*(pow(r,2)))))))+(((-2)*((pow(a,4))*((pow(r,2))*(((42)*(pow(M,2)))+(((167)*((M)*(r)))+((269)*(pow(r,2))))))))+((pow(a,2))*((pow(r,3))*(((64)*(pow(M,3)))+(((1368)*((pow(M,2))*(r)))+(((410)*((M)*(pow(r,2))))+((-929)*(pow(r,3))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((2048)*(pow(a,20)))+(((135135)*(pow(r,20)))+(((225225)*((pow(a,2))*((pow(r,17))*(((2)*(M))+((5)*(r))))))+(((pow(a,18))*((r)*(((93898)*(M))+((67429)*(r)))))+(((924)*((pow(a,4))*((pow(r,14))*(((422)*(pow(M,2)))+(((3478)*((M)*(r)))+((4493)*(pow(r,2))))))))+(((pow(a,16))*((pow(r,2))*(((317672)*(pow(M,2)))+(((1068856)*((M)*(r)))+((594119)*(pow(r,2)))))))+(((132)*((pow(a,6))*((pow(r,11))*(((288)*(pow(M,3)))+(((17292)*((pow(M,2))*(r)))+(((75088)*((M)*(pow(r,2))))+((67297)*(pow(r,3)))))))))+(((4)*((pow(a,14))*((pow(r,3))*(((15008)*(pow(M,3)))+(((499020)*((pow(M,2))*(r)))+(((1224468)*((M)*(pow(r,2))))+((644693)*(pow(r,3)))))))))+(((66)*((pow(a,8))*((pow(r,8))*(((-128)*(pow(M,4)))+(((2560)*((pow(M,3))*(r)))+(((84108)*((pow(M,2))*(pow(r,2))))+(((260788)*((M)*(pow(r,3))))+((184169)*(pow(r,4))))))))))+(((4)*((pow(a,12))*((pow(r,4))*(((-3392)*(pow(M,4)))+(((53248)*((pow(M,3))*(r)))+(((1298742)*((pow(M,2))*(pow(r,2))))+(((3048190)*((M)*(pow(r,3))))+((1662295)*(pow(r,4))))))))))+((2)*((pow(a,10))*((pow(r,5))*(((1024)*(pow(M,5)))+(((-11008)*((pow(M,4))*(r)))+(((141952)*((pow(M,3))*(pow(r,2))))+(((3587536)*((pow(M,2))*(pow(r,3))))+(((9166730)*((M)*(pow(r,4))))+((5515819)*(pow(r,5)))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((3465)*((r)*((pow((pow(a,2))+(pow(r,2)),6))*((((39)*(pow(r,11)))+(((3)*((pow(a,10))*(((2)*(M))+(r))))+(((13)*((pow(a,2))*((pow(r,8))*(((14)*(M))+((11)*(r))))))+(((pow(a,8))*((r)*(((80)*(pow(M,2)))+(((104)*((M)*(r)))+((35)*(pow(r,2)))))))+(((2)*((pow(a,4))*((pow(r,5))*(((136)*(pow(M,2)))+(((228)*((M)*(r)))+((99)*(pow(r,2))))))))+((2)*((pow(a,6))*((pow(r,2))*(((64)*(pow(M,3)))+(((176)*((pow(M,2))*(r)))+(((186)*((M)*(pow(r,2))))+((63)*(pow(r,3))))))))))))))*(expr[3])))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_428(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[428] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.001302083333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"))*((HighPrecisionScalar("3.169456506320057621015200273690809860047526474937208270233125244411137145633781465045978177906890608"))*((pow(a,-13))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-7))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((3)*(pow(a,4)))+(((11)*(pow(r,4)))+((2)*((pow(a,2))*((r)*(((8)*(M))+((7)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((2048)*(pow(a,20)))+(((135135)*(pow(r,20)))+(((225225)*((pow(a,2))*((pow(r,17))*(((2)*(M))+((5)*(r))))))+(((pow(a,18))*((r)*(((93898)*(M))+((67429)*(r)))))+(((924)*((pow(a,4))*((pow(r,14))*(((422)*(pow(M,2)))+(((3478)*((M)*(r)))+((4493)*(pow(r,2))))))))+(((pow(a,16))*((pow(r,2))*(((317672)*(pow(M,2)))+(((1068856)*((M)*(r)))+((594119)*(pow(r,2)))))))+(((132)*((pow(a,6))*((pow(r,11))*(((288)*(pow(M,3)))+(((17292)*((pow(M,2))*(r)))+(((75088)*((M)*(pow(r,2))))+((67297)*(pow(r,3)))))))))+(((4)*((pow(a,14))*((pow(r,3))*(((15008)*(pow(M,3)))+(((499020)*((pow(M,2))*(r)))+(((1224468)*((M)*(pow(r,2))))+((644693)*(pow(r,3)))))))))+(((66)*((pow(a,8))*((pow(r,8))*(((-128)*(pow(M,4)))+(((2560)*((pow(M,3))*(r)))+(((84108)*((pow(M,2))*(pow(r,2))))+(((260788)*((M)*(pow(r,3))))+((184169)*(pow(r,4))))))))))+(((4)*((pow(a,12))*((pow(r,4))*(((-3392)*(pow(M,4)))+(((53248)*((pow(M,3))*(r)))+(((1298742)*((pow(M,2))*(pow(r,2))))+(((3048190)*((M)*(pow(r,3))))+((1662295)*(pow(r,4))))))))))+((2)*((pow(a,10))*((pow(r,5))*(((1024)*(pow(M,5)))+(((-11008)*((pow(M,4))*(r)))+(((141952)*((pow(M,3))*(pow(r,2))))+(((3587536)*((pow(M,2))*(pow(r,3))))+(((9166730)*((M)*(pow(r,4))))+((5515819)*(pow(r,5)))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((3465)*((r)*((pow((pow(a,2))+(pow(r,2)),6))*((((39)*(pow(r,11)))+(((3)*((pow(a,10))*(((2)*(M))+(r))))+(((13)*((pow(a,2))*((pow(r,8))*(((14)*(M))+((11)*(r))))))+(((pow(a,8))*((r)*(((80)*(pow(M,2)))+(((104)*((M)*(r)))+((35)*(pow(r,2)))))))+(((2)*((pow(a,4))*((pow(r,5))*(((136)*(pow(M,2)))+(((228)*((M)*(r)))+((99)*(pow(r,2))))))))+((2)*((pow(a,6))*((pow(r,2))*(((64)*(pow(M,3)))+(((176)*((pow(M,2))*(r)))+(((186)*((M)*(pow(r,2))))+((63)*(pow(r,3))))))))))))))*(expr[3])))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_429(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[429] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.0006510416666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667"))*((HighPrecisionScalar("3.169456506320057621015200273690809860047526474937208270233125244411137145633781465045978177906890608"))*((pow(a,-15))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-8))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*((((3)*(pow(a,4)))+(((11)*(pow(r,4)))+((2)*((pow(a,2))*((r)*(((8)*(M))+((7)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((2048)*(pow(a,20)))+(((135135)*(pow(r,20)))+(((225225)*((pow(a,2))*((pow(r,17))*(((2)*(M))+((5)*(r))))))+(((pow(a,18))*((r)*(((93898)*(M))+((67429)*(r)))))+(((924)*((pow(a,4))*((pow(r,14))*(((422)*(pow(M,2)))+(((3478)*((M)*(r)))+((4493)*(pow(r,2))))))))+(((pow(a,16))*((pow(r,2))*(((317672)*(pow(M,2)))+(((1068856)*((M)*(r)))+((594119)*(pow(r,2)))))))+(((132)*((pow(a,6))*((pow(r,11))*(((288)*(pow(M,3)))+(((17292)*((pow(M,2))*(r)))+(((75088)*((M)*(pow(r,2))))+((67297)*(pow(r,3)))))))))+(((4)*((pow(a,14))*((pow(r,3))*(((15008)*(pow(M,3)))+(((499020)*((pow(M,2))*(r)))+(((1224468)*((M)*(pow(r,2))))+((644693)*(pow(r,3)))))))))+(((66)*((pow(a,8))*((pow(r,8))*(((-128)*(pow(M,4)))+(((2560)*((pow(M,3))*(r)))+(((84108)*((pow(M,2))*(pow(r,2))))+(((260788)*((M)*(pow(r,3))))+((184169)*(pow(r,4))))))))))+(((4)*((pow(a,12))*((pow(r,4))*(((-3392)*(pow(M,4)))+(((53248)*((pow(M,3))*(r)))+(((1298742)*((pow(M,2))*(pow(r,2))))+(((3048190)*((M)*(pow(r,3))))+((1662295)*(pow(r,4))))))))))+((2)*((pow(a,10))*((pow(r,5))*(((1024)*(pow(M,5)))+(((-11008)*((pow(M,4))*(r)))+(((141952)*((pow(M,3))*(pow(r,2))))+(((3587536)*((pow(M,2))*(pow(r,3))))+(((9166730)*((M)*(pow(r,4))))+((5515819)*(pow(r,5)))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((3465)*((r)*((pow((pow(a,2))+(pow(r,2)),6))*((((39)*(pow(r,11)))+(((3)*((pow(a,10))*(((2)*(M))+(r))))+(((13)*((pow(a,2))*((pow(r,8))*(((14)*(M))+((11)*(r))))))+(((pow(a,8))*((r)*(((80)*(pow(M,2)))+(((104)*((M)*(r)))+((35)*(pow(r,2)))))))+(((2)*((pow(a,4))*((pow(r,5))*(((136)*(pow(M,2)))+(((228)*((M)*(r)))+((99)*(pow(r,2))))))))+((2)*((pow(a,6))*((pow(r,2))*(((64)*(pow(M,3)))+(((176)*((pow(M,2))*(r)))+(((186)*((M)*(pow(r,2))))+((63)*(pow(r,3))))))))))))))*(expr[3])))))))))))))))).cast<double>());
}

}
