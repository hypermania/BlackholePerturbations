
#include "../teukolsky_scalar.hpp"
#include <map>

typedef TeukolskyScalarPDE::HighPrecisionScalar HighPrecisionScalar;


void compute_coeffs_200(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[200] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.02343750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-9))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-5))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((279)*(pow(a,12)))+(((-140)*((pow(a,2))*(((M)+((-5)*(r)))*(pow(r,9)))))+(((105)*(pow(r,12)))+(((4)*((pow(a,10))*((r)*(((-163)*(M))+((337)*(r))))))+(((7)*((pow(a,4))*((pow(r,6))*(((32)*(pow(M,2)))+(((-112)*((M)*(r)))+((283)*(pow(r,2))))))))+(((pow(a,8))*((pow(r,2))*(((800)*(pow(M,2)))+(((-1808)*((M)*(r)))+((2755)*(pow(r,2)))))))+((8)*((pow(a,6))*((pow(r,3))*(((-48)*(pow(M,3)))+(((128)*((pow(M,2))*(r)))+(((-225)*((M)*(pow(r,2))))+((384)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((105)*((pow((pow(a,2))+(pow(r,2)),8))*(expr[3])))))))))))).cast<double>());
}

void compute_coeffs_201(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[201] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("-0.3750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-8))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-5))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((expr[0])*((expr[1])*(((-1)*((a)*((r)*((((279)*(pow(a,12)))+(((-140)*((pow(a,2))*(((M)+((-5)*(r)))*(pow(r,9)))))+(((105)*(pow(r,12)))+(((4)*((pow(a,10))*((r)*(((-163)*(M))+((337)*(r))))))+(((7)*((pow(a,4))*((pow(r,6))*(((32)*(pow(M,2)))+(((-112)*((M)*(r)))+((283)*(pow(r,2))))))))+(((pow(a,8))*((pow(r,2))*(((800)*(pow(M,2)))+(((-1808)*((M)*(r)))+((2755)*(pow(r,2)))))))+((8)*((pow(a,6))*((pow(r,3))*(((-48)*(pow(M,3)))+(((128)*((pow(M,2))*(r)))+(((-225)*((M)*(pow(r,2))))+((384)*(pow(r,3)))))))))))))))*((expr[0])*(expr[1]))))))+((105)*((pow((pow(a,2))+(pow(r,2)),8))*((expr[2])*(expr[3])))))))))))).cast<double>());
}

void compute_coeffs_202(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[202] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.007812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("1.612451549659709930473322646060754226226879261121714677587318477852774990205137640592030853343446129"))*((pow(a,-11))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-6))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,4))+(((-1)*((pow(a,2))*((r)*(((3)*(M))+(r)))))+((pow(r,2))*(((2)*(pow(M,2)))+(((19)*((M)*(r)))+((-10)*(pow(r,2))))))))*(((a)*((r)*(((3465)*((pow(r,20))*(((-2)*(M))+(r))))+(((2245)*((pow(a,20))*(((2)*(M))+(r))))+(((210)*((pow(a,2))*((pow(r,17))*(((-82)*(pow(M,2)))+(((-248)*((M)*(r)))+((161)*(pow(r,2))))))))+(((10)*((pow(a,18))*((r)*(((-194)*(pow(M,2)))+(((4296)*((M)*(r)))+((2421)*(pow(r,2))))))))+(((-21)*((pow(a,4))*((pow(r,14))*(((224)*(pow(M,3)))+(((6224)*((pow(M,2))*(r)))+(((7638)*((M)*(pow(r,2))))+((-7053)*(pow(r,3)))))))))+(((pow(a,16))*((pow(r,2))*(((-19936)*(pow(M,3)))+(((-45424)*((pow(M,2))*(r)))+(((169638)*((M)*(pow(r,2))))+((116133)*(pow(r,3))))))))+(((24)*((pow(a,6))*((pow(r,11))*(((104)*(pow(M,4)))+(((-1384)*((pow(M,3))*(r)))+(((-17876)*((pow(M,2))*(pow(r,2))))+(((-10048)*((M)*(pow(r,3))))+((15977)*(pow(r,4))))))))))+(((8)*((pow(a,14))*((pow(r,3))*(((1912)*(pow(M,4)))+(((-11128)*((pow(M,3))*(r)))+(((-30088)*((pow(M,2))*(pow(r,2))))+(((44624)*((M)*(pow(r,3))))+((40891)*(pow(r,4))))))))))+(((-2)*((pow(a,8))*((pow(r,8))*(((1024)*(pow(M,5)))+(((-7552)*((pow(M,4))*(r)))+(((50320)*((pow(M,3))*(pow(r,2))))+(((395560)*((pow(M,2))*(pow(r,3))))+(((58490)*((M)*(pow(r,4))))+((-324665)*(pow(r,5)))))))))))+(((2)*((pow(a,12))*((pow(r,4))*(((-4096)*(pow(M,5)))+(((20352)*((pow(M,4))*(r)))+(((-83280)*((pow(M,3))*(pow(r,2))))+(((-304600)*((pow(M,2))*(pow(r,3))))+(((206130)*((M)*(pow(r,4))))+((300165)*(pow(r,5)))))))))))+((4)*((pow(a,10))*((pow(r,5))*(((512)*(pow(M,6)))+(((-2560)*((pow(M,5))*(r)))+(((9504)*((pow(M,4))*(pow(r,2))))+(((-42400)*((pow(M,3))*(pow(r,3))))+(((-221890)*((pow(M,2))*(pow(r,4))))+(((48840)*((M)*(pow(r,5))))+((187755)*(pow(r,6))))))))))))))))))))))))+((-315)*((pow((pow(a,2))+(pow(r,2)),8))*(((pow(a,4))+(((11)*(pow(r,4)))+((4)*((pow(a,2))*((r)*(((5)*(M))+((3)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3]))))))))))))))).cast<double>());
}

void compute_coeffs_203(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[203] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.007812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("1.612451549659709930473322646060754226226879261121714677587318477852774990205137640592030853343446129"))*((pow(a,-9))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-5))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((a)*((r)*(((3465)*((pow(r,20))*(((-2)*(M))+(r))))+(((2245)*((pow(a,20))*(((2)*(M))+(r))))+(((210)*((pow(a,2))*((pow(r,17))*(((-82)*(pow(M,2)))+(((-248)*((M)*(r)))+((161)*(pow(r,2))))))))+(((10)*((pow(a,18))*((r)*(((-194)*(pow(M,2)))+(((4296)*((M)*(r)))+((2421)*(pow(r,2))))))))+(((-21)*((pow(a,4))*((pow(r,14))*(((224)*(pow(M,3)))+(((6224)*((pow(M,2))*(r)))+(((7638)*((M)*(pow(r,2))))+((-7053)*(pow(r,3)))))))))+(((pow(a,16))*((pow(r,2))*(((-19936)*(pow(M,3)))+(((-45424)*((pow(M,2))*(r)))+(((169638)*((M)*(pow(r,2))))+((116133)*(pow(r,3))))))))+(((24)*((pow(a,6))*((pow(r,11))*(((104)*(pow(M,4)))+(((-1384)*((pow(M,3))*(r)))+(((-17876)*((pow(M,2))*(pow(r,2))))+(((-10048)*((M)*(pow(r,3))))+((15977)*(pow(r,4))))))))))+(((8)*((pow(a,14))*((pow(r,3))*(((1912)*(pow(M,4)))+(((-11128)*((pow(M,3))*(r)))+(((-30088)*((pow(M,2))*(pow(r,2))))+(((44624)*((M)*(pow(r,3))))+((40891)*(pow(r,4))))))))))+(((-2)*((pow(a,8))*((pow(r,8))*(((1024)*(pow(M,5)))+(((-7552)*((pow(M,4))*(r)))+(((50320)*((pow(M,3))*(pow(r,2))))+(((395560)*((pow(M,2))*(pow(r,3))))+(((58490)*((M)*(pow(r,4))))+((-324665)*(pow(r,5)))))))))))+(((2)*((pow(a,12))*((pow(r,4))*(((-4096)*(pow(M,5)))+(((20352)*((pow(M,4))*(r)))+(((-83280)*((pow(M,3))*(pow(r,2))))+(((-304600)*((pow(M,2))*(pow(r,3))))+(((206130)*((M)*(pow(r,4))))+((300165)*(pow(r,5)))))))))))+((4)*((pow(a,10))*((pow(r,5))*(((512)*(pow(M,6)))+(((-2560)*((pow(M,5))*(r)))+(((9504)*((pow(M,4))*(pow(r,2))))+(((-42400)*((pow(M,3))*(pow(r,3))))+(((-221890)*((pow(M,2))*(pow(r,4))))+(((48840)*((M)*(pow(r,5))))+((187755)*(pow(r,6))))))))))))))))))))))))+((-315)*((pow((pow(a,2))+(pow(r,2)),8))*(((pow(a,4))+(((11)*(pow(r,4)))+((4)*((pow(a,2))*((r)*(((5)*(M))+((3)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_204(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[204] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.003906250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("1.612451549659709930473322646060754226226879261121714677587318477852774990205137640592030853343446129"))*((pow(a,-11))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-6))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*(((a)*((r)*(((3465)*((pow(r,20))*(((-2)*(M))+(r))))+(((2245)*((pow(a,20))*(((2)*(M))+(r))))+(((210)*((pow(a,2))*((pow(r,17))*(((-82)*(pow(M,2)))+(((-248)*((M)*(r)))+((161)*(pow(r,2))))))))+(((10)*((pow(a,18))*((r)*(((-194)*(pow(M,2)))+(((4296)*((M)*(r)))+((2421)*(pow(r,2))))))))+(((-21)*((pow(a,4))*((pow(r,14))*(((224)*(pow(M,3)))+(((6224)*((pow(M,2))*(r)))+(((7638)*((M)*(pow(r,2))))+((-7053)*(pow(r,3)))))))))+(((pow(a,16))*((pow(r,2))*(((-19936)*(pow(M,3)))+(((-45424)*((pow(M,2))*(r)))+(((169638)*((M)*(pow(r,2))))+((116133)*(pow(r,3))))))))+(((24)*((pow(a,6))*((pow(r,11))*(((104)*(pow(M,4)))+(((-1384)*((pow(M,3))*(r)))+(((-17876)*((pow(M,2))*(pow(r,2))))+(((-10048)*((M)*(pow(r,3))))+((15977)*(pow(r,4))))))))))+(((8)*((pow(a,14))*((pow(r,3))*(((1912)*(pow(M,4)))+(((-11128)*((pow(M,3))*(r)))+(((-30088)*((pow(M,2))*(pow(r,2))))+(((44624)*((M)*(pow(r,3))))+((40891)*(pow(r,4))))))))))+(((-2)*((pow(a,8))*((pow(r,8))*(((1024)*(pow(M,5)))+(((-7552)*((pow(M,4))*(r)))+(((50320)*((pow(M,3))*(pow(r,2))))+(((395560)*((pow(M,2))*(pow(r,3))))+(((58490)*((M)*(pow(r,4))))+((-324665)*(pow(r,5)))))))))))+(((2)*((pow(a,12))*((pow(r,4))*(((-4096)*(pow(M,5)))+(((20352)*((pow(M,4))*(r)))+(((-83280)*((pow(M,3))*(pow(r,2))))+(((-304600)*((pow(M,2))*(pow(r,3))))+(((206130)*((M)*(pow(r,4))))+((300165)*(pow(r,5)))))))))))+((4)*((pow(a,10))*((pow(r,5))*(((512)*(pow(M,6)))+(((-2560)*((pow(M,5))*(r)))+(((9504)*((pow(M,4))*(pow(r,2))))+(((-42400)*((pow(M,3))*(pow(r,3))))+(((-221890)*((pow(M,2))*(pow(r,4))))+(((48840)*((M)*(pow(r,5))))+((187755)*(pow(r,6))))))))))))))))))))))))+((-315)*((pow((pow(a,2))+(pow(r,2)),8))*(((pow(a,4))+(((11)*(pow(r,4)))+((4)*((pow(a,2))*((r)*(((5)*(M))+((3)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}
