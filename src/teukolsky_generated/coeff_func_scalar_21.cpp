
#include "../teukolsky.hpp"

namespace Teukolsky {

void compute_coeffs_scalar_105(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[105] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.03125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("1.612451549659709930473322646060754226226879261121714677587318477852774990205137640592030853343446129"))*((pow(a,-9))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-4))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,6))+(((pow(a,4))*((r)*(((3)*(M))+(r))))+(((-3)*((pow(r,5))*((M)+((3)*(r)))))+((-1)*((pow(a,2))*((pow(r,2))*(((4)*(pow(M,2)))+(((16)*((M)*(r)))+((9)*(pow(r,2)))))))))))*((expr[2])*(((7)*((a)*((((33)*(pow(a,8)))+(((165)*(pow(r,8)))+(((20)*((pow(a,2))*((pow(r,5))*(((16)*(M))+((25)*(r))))))+(((4)*((pow(a,6))*((r)*(((52)*(M))+((59)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(((56)*(pow(M,2)))+(((264)*((M)*(r)))+((269)*(pow(r,2))))))))))))*((((pow(r,4))*(((-2)*(M))+(r)))+(((pow(a,4))*(((2)*(M))+(r)))+(((pow(a,2))*(((-4)*((pow(M,2))*(r)))+((2)*(pow(r,3)))))+((pow(expr[0],2))*(pow(expr[1],2))))))*(expr[2])))))+((-10)*((((5)*(pow(a,12)))+(((231)*(pow(r,12)))+(((60)*((pow(a,10))*((r)*(((3)*(M))+((2)*(r))))))+(((252)*((pow(a,2))*((pow(r,9))*(((3)*(M))+((4)*(r))))))+(((15)*((pow(a,8))*((pow(r,2))*(((32)*(pow(M,2)))+(((80)*((M)*(r)))+((43)*(pow(r,2))))))))+(((21)*((pow(a,4))*((pow(r,6))*(((32)*(pow(M,2)))+(((112)*((M)*(r)))+((83)*(pow(r,2))))))))+((8)*((pow(a,6))*((pow(r,3))*(((16)*(pow(M,3)))+(((144)*((pow(M,2))*(r)))+(((327)*((M)*(pow(r,2))))+((187)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_106(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[106] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.06250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("1.612451549659709930473322646060754226226879261121714677587318477852774990205137640592030853343446129"))*((pow(a,-7))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-4))*(((pow(a,4))+(((3)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+(r)))))))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((expr[2])*(((7)*((((165)*((a)*((pow(r,12))*(((-2)*(M))+(r)))))+(((33)*((pow(a,13))*(((2)*(M))+(r))))+(((10)*((pow(a,3))*((pow(r,9))*(((-130)*(pow(M,2)))+(((-68)*((M)*(r)))+((83)*(pow(r,2))))))))+(((2)*((pow(a,11))*((r)*(((142)*(pow(M,2)))+(((340)*((M)*(r)))+((151)*(pow(r,2))))))))+(((pow(a,9))*((pow(r,2))*(((-608)*(pow(M,3)))+(((224)*((pow(M,2))*(r)))+(((1954)*((M)*(pow(r,2))))+((1043)*(pow(r,3))))))))+(((pow(a,5))*((pow(r,6))*(((-1504)*(pow(M,3)))+(((-2944)*((pow(M,2))*(r)))+(((422)*((M)*(pow(r,2))))+((1703)*(pow(r,3))))))))+((4)*((pow(a,7))*((pow(r,3))*(((-112)*(pow(M,4)))+(((-528)*((pow(M,3))*(r)))+(((-426)*((pow(M,2))*(pow(r,2))))+(((528)*((M)*(pow(r,3))))+((453)*(pow(r,4))))))))))))))))*(expr[2])))+((-5)*((((5)*(pow(a,12)))+(((231)*(pow(r,12)))+(((60)*((pow(a,10))*((r)*(((3)*(M))+((2)*(r))))))+(((252)*((pow(a,2))*((pow(r,9))*(((3)*(M))+((4)*(r))))))+(((15)*((pow(a,8))*((pow(r,2))*(((32)*(pow(M,2)))+(((80)*((M)*(r)))+((43)*(pow(r,2))))))))+(((21)*((pow(a,4))*((pow(r,6))*(((32)*(pow(M,2)))+(((112)*((M)*(r)))+((83)*(pow(r,2))))))))+((8)*((pow(a,6))*((pow(r,3))*(((16)*(pow(M,3)))+(((144)*((pow(M,2))*(r)))+(((327)*((M)*(pow(r,2))))+((187)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_107(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[107] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.03125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("1.612451549659709930473322646060754226226879261121714677587318477852774990205137640592030853343446129"))*((pow(a,-9))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-5))*(((pow(a,4))+(((3)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+(r)))))))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*(((7)*((a)*((r)*(((165)*((pow(r,12))*(((-2)*(M))+(r))))+(((33)*((pow(a,12))*(((2)*(M))+(r))))+(((10)*((pow(a,2))*((pow(r,9))*(((-130)*(pow(M,2)))+(((-68)*((M)*(r)))+((83)*(pow(r,2))))))))+(((2)*((pow(a,10))*((r)*(((142)*(pow(M,2)))+(((340)*((M)*(r)))+((151)*(pow(r,2))))))))+(((pow(a,8))*((pow(r,2))*(((-608)*(pow(M,3)))+(((224)*((pow(M,2))*(r)))+(((1954)*((M)*(pow(r,2))))+((1043)*(pow(r,3))))))))+(((pow(a,4))*((pow(r,6))*(((-1504)*(pow(M,3)))+(((-2944)*((pow(M,2))*(r)))+(((422)*((M)*(pow(r,2))))+((1703)*(pow(r,3))))))))+((4)*((pow(a,6))*((pow(r,3))*(((-112)*(pow(M,4)))+(((-528)*((pow(M,3))*(r)))+(((-426)*((pow(M,2))*(pow(r,2))))+(((528)*((M)*(pow(r,3))))+((453)*(pow(r,4)))))))))))))))))))+((-5)*((((5)*(pow(a,12)))+(((231)*(pow(r,12)))+(((60)*((pow(a,10))*((r)*(((3)*(M))+((2)*(r))))))+(((252)*((pow(a,2))*((pow(r,9))*(((3)*(M))+((4)*(r))))))+(((15)*((pow(a,8))*((pow(r,2))*(((32)*(pow(M,2)))+(((80)*((M)*(r)))+((43)*(pow(r,2))))))))+(((21)*((pow(a,4))*((pow(r,6))*(((32)*(pow(M,2)))+(((112)*((M)*(r)))+((83)*(pow(r,2))))))))+((8)*((pow(a,6))*((pow(r,3))*(((16)*(pow(M,3)))+(((144)*((pow(M,2))*(r)))+(((327)*((M)*(pow(r,2))))+((187)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_108(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[108] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.001116071428571428571428571428571428571428571428571428571428571428571428571428571428571428571428571429"))*((HighPrecisionScalar("1.843908891458577462000454856352558631449361009744492801601550441088534205360375092153578818158656113"))*((pow(a,-11))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-5))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,6))+(((pow(a,4))*((r)*(((3)*(M))+(r))))+(((-3)*((pow(r,5))*((M)+((3)*(r)))))+((-1)*((pow(a,2))*((pow(r,2))*(((4)*(pow(M,2)))+(((16)*((M)*(r)))+((9)*(pow(r,2)))))))))))*(((a)*((r)*(((-225225)*((((2)*(M))+((-1)*(r)))*(pow(r,16))))+(((15159)*((pow(a,16))*(((2)*(M))+(r))))+(((30030)*((pow(a,2))*((pow(r,13))*(((-74)*(pow(M,2)))+(((-46)*((M)*(r)))+((49)*(pow(r,2))))))))+(((2)*((pow(a,14))*((r)*(((173638)*(pow(M,2)))+(((294910)*((M)*(r)))+((111625)*(pow(r,2))))))))+(((770)*((pow(a,4))*((pow(r,10))*(((-4808)*(pow(M,3)))+(((-10104)*((pow(M,2))*(r)))+(((216)*((M)*(pow(r,2))))+((5359)*(pow(r,3)))))))))+(((2)*((pow(a,12))*((pow(r,2))*(((-24264)*(pow(M,3)))+(((1005432)*((pow(M,2))*(r)))+(((1621720)*((M)*(pow(r,2))))+((617105)*(pow(r,3)))))))))+(((2)*((pow(a,10))*((pow(r,3))*(((-669888)*(pow(M,4)))+(((-1436832)*((pow(M,3))*(r)))+(((1417758)*((pow(M,2))*(pow(r,2))))+(((4051170)*((M)*(pow(r,3))))+((1789045)*(pow(r,4))))))))))+(((2)*((pow(a,6))*((pow(r,7))*(((-1156928)*(pow(M,4)))+(((-5090464)*((pow(M,3))*(r)))+(((-4518942)*((pow(M,2))*(pow(r,2))))+(((2969314)*((M)*(pow(r,3))))+((3229067)*(pow(r,4))))))))))+((-4)*((pow(a,8))*((pow(r,4))*(((97408)*(pow(M,5)))+(((913408)*((pow(M,4))*(r)))+(((2325976)*((pow(M,3))*(pow(r,2))))+(((577024)*((pow(M,2))*(pow(r,3))))+(((-2564945)*((M)*(pow(r,4))))+((-1532480)*(pow(r,5)))))))))))))))))))))+((-35)*((((35)*(pow(a,16)))+(((6435)*(pow(r,16)))+(((280)*((pow(a,14))*((r)*(((8)*(M))+((5)*(r))))))+(((3432)*((pow(a,2))*((pow(r,13))*(((8)*(M))+((11)*(r))))))+(((420)*((pow(a,12))*((pow(r,2))*(((32)*(pow(M,2)))+(((64)*((M)*(r)))+((29)*(pow(r,2))))))))+(((132)*((pow(a,4))*((pow(r,10))*(((288)*(pow(M,2)))+(((960)*((M)*(r)))+((709)*(pow(r,2))))))))+(((56)*((pow(a,10))*((pow(r,3))*(((256)*(pow(M,3)))+(((1344)*((pow(M,2))*(r)))+(((1992)*((M)*(pow(r,2))))+((847)*(pow(r,3)))))))))+(((72)*((pow(a,6))*((pow(r,7))*(((256)*(pow(M,3)))+(((1728)*((pow(M,2))*(r)))+(((3272)*((M)*(pow(r,2))))+((1761)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((1024)*(pow(M,4)))+(((16384)*((pow(M,3))*(r)))+(((74112)*((pow(M,2))*(pow(r,2))))+(((111616)*((M)*(pow(r,3))))+((50569)*(pow(r,4))))))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_109(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[109] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.001116071428571428571428571428571428571428571428571428571428571428571428571428571428571428571428571429"))*((HighPrecisionScalar("1.843908891458577462000454856352558631449361009744492801601550441088534205360375092153578818158656113"))*((pow(a,-9))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-5))*(((pow(a,4))+(((3)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+(r)))))))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((a)*((r)*(((-225225)*((((2)*(M))+((-1)*(r)))*(pow(r,16))))+(((15159)*((pow(a,16))*(((2)*(M))+(r))))+(((30030)*((pow(a,2))*((pow(r,13))*(((-74)*(pow(M,2)))+(((-46)*((M)*(r)))+((49)*(pow(r,2))))))))+(((2)*((pow(a,14))*((r)*(((173638)*(pow(M,2)))+(((294910)*((M)*(r)))+((111625)*(pow(r,2))))))))+(((770)*((pow(a,4))*((pow(r,10))*(((-4808)*(pow(M,3)))+(((-10104)*((pow(M,2))*(r)))+(((216)*((M)*(pow(r,2))))+((5359)*(pow(r,3)))))))))+(((2)*((pow(a,12))*((pow(r,2))*(((-24264)*(pow(M,3)))+(((1005432)*((pow(M,2))*(r)))+(((1621720)*((M)*(pow(r,2))))+((617105)*(pow(r,3)))))))))+(((2)*((pow(a,10))*((pow(r,3))*(((-669888)*(pow(M,4)))+(((-1436832)*((pow(M,3))*(r)))+(((1417758)*((pow(M,2))*(pow(r,2))))+(((4051170)*((M)*(pow(r,3))))+((1789045)*(pow(r,4))))))))))+(((2)*((pow(a,6))*((pow(r,7))*(((-1156928)*(pow(M,4)))+(((-5090464)*((pow(M,3))*(r)))+(((-4518942)*((pow(M,2))*(pow(r,2))))+(((2969314)*((M)*(pow(r,3))))+((3229067)*(pow(r,4))))))))))+((-4)*((pow(a,8))*((pow(r,4))*(((97408)*(pow(M,5)))+(((913408)*((pow(M,4))*(r)))+(((2325976)*((pow(M,3))*(pow(r,2))))+(((577024)*((pow(M,2))*(pow(r,3))))+(((-2564945)*((M)*(pow(r,4))))+((-1532480)*(pow(r,5)))))))))))))))))))))+((-35)*((((35)*(pow(a,16)))+(((6435)*(pow(r,16)))+(((280)*((pow(a,14))*((r)*(((8)*(M))+((5)*(r))))))+(((3432)*((pow(a,2))*((pow(r,13))*(((8)*(M))+((11)*(r))))))+(((420)*((pow(a,12))*((pow(r,2))*(((32)*(pow(M,2)))+(((64)*((M)*(r)))+((29)*(pow(r,2))))))))+(((132)*((pow(a,4))*((pow(r,10))*(((288)*(pow(M,2)))+(((960)*((M)*(r)))+((709)*(pow(r,2))))))))+(((56)*((pow(a,10))*((pow(r,3))*(((256)*(pow(M,3)))+(((1344)*((pow(M,2))*(r)))+(((1992)*((M)*(pow(r,2))))+((847)*(pow(r,3)))))))))+(((72)*((pow(a,6))*((pow(r,7))*(((256)*(pow(M,3)))+(((1728)*((pow(M,2))*(r)))+(((3272)*((M)*(pow(r,2))))+((1761)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((1024)*(pow(M,4)))+(((16384)*((pow(M,3))*(r)))+(((74112)*((pow(M,2))*(pow(r,2))))+(((111616)*((M)*(pow(r,3))))+((50569)*(pow(r,4))))))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

}
