
#include "../teukolsky_scalar.hpp"
#include <map>

typedef TeukolskyScalarPDE::HighPrecisionScalar HighPrecisionScalar;


void compute_coeffs_60(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[60] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.6250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-5))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-3))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*(((a)*((r)*(((3)*((pow(r,8))*(((-2)*(M))+(r))))+(((5)*((pow(a,8))*(((2)*(M))+(r))))+(((2)*((pow(a,2))*((pow(r,5))*(((-2)*(pow(M,2)))+(((-10)*((M)*(r)))+((7)*(pow(r,2))))))))+(((2)*((pow(a,6))*((r)*(((-14)*(pow(M,2)))+(((6)*((M)*(r)))+((9)*(pow(r,2))))))))+((4)*((pow(a,4))*((pow(r,2))*(((4)*(pow(M,3)))+(((-8)*((pow(M,2))*(r)))+(((-3)*((M)*(pow(r,2))))+((6)*(pow(r,3)))))))))))))))+((-3)*((pow((pow(a,2))+(pow(r,2)),4))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))).cast<double>());
}

void compute_coeffs_61(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[61] = std::complex<double>(0.0,1.0)*(((5)*((pow(a,-4))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-3))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((a)*((r)*(((3)*((pow(r,8))*(((-2)*(M))+(r))))+(((5)*((pow(a,8))*(((2)*(M))+(r))))+(((2)*((pow(a,2))*((pow(r,5))*(((-2)*(pow(M,2)))+(((-10)*((M)*(r)))+((7)*(pow(r,2))))))))+(((2)*((pow(a,6))*((r)*(((-14)*(pow(M,2)))+(((6)*((M)*(r)))+((9)*(pow(r,2))))))))+((4)*((pow(a,4))*((pow(r,2))*(((4)*(pow(M,3)))+(((-8)*((pow(M,2))*(r)))+(((-3)*((M)*(pow(r,2))))+((6)*(pow(r,3)))))))))))))))+((-3)*((pow((pow(a,2))+(pow(r,2)),4))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))).cast<double>());
}

void compute_coeffs_62(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[62] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.1250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("1.732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248576"))*((pow(a,-7))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-4))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,4))+(((-3)*((pow(a,2))*((M)*(r))))+((pow(r,2))*(((2)*(pow(M,2)))+(((5)*((M)*(r)))+((-3)*(pow(r,2))))))))*(((a)*((r)*(((105)*((pow(r,12))*(((-2)*(M))+(r))))+(((81)*((pow(a,12))*(((2)*(M))+(r))))+(((10)*((pow(a,2))*((pow(r,9))*(((-50)*(pow(M,2)))+(((-76)*((M)*(r)))+((61)*(pow(r,2))))))))+(((pow(a,10))*(((-212)*((pow(M,2))*(r)))+(((760)*((M)*(pow(r,2))))+((514)*(pow(r,3))))))+(((pow(a,8))*((pow(r,2))*(((-256)*(pow(M,3)))+(((-1232)*((pow(M,2))*(r)))+(((1178)*((M)*(pow(r,2))))+((1351)*(pow(r,3))))))))+(((pow(a,4))*((pow(r,6))*(((-128)*(pow(M,3)))+(((-1808)*((pow(M,2))*(r)))+(((-746)*((M)*(pow(r,2))))+((1471)*(pow(r,3))))))))+((4)*((pow(a,6))*((pow(r,3))*(((16)*(pow(M,4)))+(((-96)*((pow(M,3))*(r)))+(((-582)*((pow(M,2))*(pow(r,2))))+(((96)*((M)*(pow(r,3))))+((471)*(pow(r,4))))))))))))))))))+((-15)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(a,4))+(((7)*(pow(r,4)))+((4)*((pow(a,2))*((r)*(((3)*(M))+((2)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3]))))))))))))))).cast<double>());
}

void compute_coeffs_63(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[63] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.1250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("1.732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248576"))*((pow(a,-5))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-3))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((a)*((r)*(((105)*((pow(r,12))*(((-2)*(M))+(r))))+(((81)*((pow(a,12))*(((2)*(M))+(r))))+(((10)*((pow(a,2))*((pow(r,9))*(((-50)*(pow(M,2)))+(((-76)*((M)*(r)))+((61)*(pow(r,2))))))))+(((pow(a,10))*(((-212)*((pow(M,2))*(r)))+(((760)*((M)*(pow(r,2))))+((514)*(pow(r,3))))))+(((pow(a,8))*((pow(r,2))*(((-256)*(pow(M,3)))+(((-1232)*((pow(M,2))*(r)))+(((1178)*((M)*(pow(r,2))))+((1351)*(pow(r,3))))))))+(((pow(a,4))*((pow(r,6))*(((-128)*(pow(M,3)))+(((-1808)*((pow(M,2))*(r)))+(((-746)*((M)*(pow(r,2))))+((1471)*(pow(r,3))))))))+((4)*((pow(a,6))*((pow(r,3))*(((16)*(pow(M,4)))+(((-96)*((pow(M,3))*(r)))+(((-582)*((pow(M,2))*(pow(r,2))))+(((96)*((M)*(pow(r,3))))+((471)*(pow(r,4))))))))))))))))))+((-15)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(a,4))+(((7)*(pow(r,4)))+((4)*((pow(a,2))*((r)*(((3)*(M))+((2)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_64(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[64] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.06250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("1.732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248576"))*((pow(a,-7))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-4))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*(((a)*((r)*(((105)*((pow(r,12))*(((-2)*(M))+(r))))+(((81)*((pow(a,12))*(((2)*(M))+(r))))+(((10)*((pow(a,2))*((pow(r,9))*(((-50)*(pow(M,2)))+(((-76)*((M)*(r)))+((61)*(pow(r,2))))))))+(((pow(a,10))*(((-212)*((pow(M,2))*(r)))+(((760)*((M)*(pow(r,2))))+((514)*(pow(r,3))))))+(((pow(a,8))*((pow(r,2))*(((-256)*(pow(M,3)))+(((-1232)*((pow(M,2))*(r)))+(((1178)*((M)*(pow(r,2))))+((1351)*(pow(r,3))))))))+(((pow(a,4))*((pow(r,6))*(((-128)*(pow(M,3)))+(((-1808)*((pow(M,2))*(r)))+(((-746)*((M)*(pow(r,2))))+((1471)*(pow(r,3))))))))+((4)*((pow(a,6))*((pow(r,3))*(((16)*(pow(M,4)))+(((-96)*((pow(M,3))*(r)))+(((-582)*((pow(M,2))*(pow(r,2))))+(((96)*((M)*(pow(r,3))))+((471)*(pow(r,4))))))))))))))))))+((-15)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(a,4))+(((7)*(pow(r,4)))+((4)*((pow(a,2))*((r)*(((3)*(M))+((2)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}
