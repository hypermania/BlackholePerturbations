
#include "../teukolsky.hpp"

namespace Teukolsky {

void compute_coeffs_scalar_135(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[135] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("-0.03125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("0.7071067811865475244008443621048490392848359376884740365883398689953662392310535194251937671638207864"))*((pow(a,-10))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-6))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((a)*((r)*(((45045)*((((2)*(M))+((-1)*(r)))*(pow(r,20))))+(((-9295)*((pow(a,20))*(((2)*(M))+(r))))+(((4620)*((pow(a,2))*((pow(r,17))*(((73)*(pow(M,2)))+(((122)*((M)*(r)))+((-89)*(pow(r,2))))))))+(((-20)*((pow(a,18))*((r)*(((4475)*(pow(M,2)))+(((13770)*((M)*(r)))+((6231)*(pow(r,2))))))))+(((21)*((pow(a,4))*((pow(r,14))*(((16112)*(pow(M,3)))+(((104312)*((pow(M,2))*(r)))+(((60594)*((M)*(pow(r,2))))+((-79839)*(pow(r,3)))))))))+(((-1)*((pow(a,16))*((pow(r,2))*(((-215728)*(pow(M,3)))+(((392408)*((pow(M,2))*(r)))+(((1480254)*((M)*(pow(r,2))))+((708009)*(pow(r,3)))))))))+(((24)*((pow(a,6))*((pow(r,11))*(((1728)*(pow(M,4)))+(((81132)*((pow(M,3))*(r)))+(((248033)*((pow(M,2))*(pow(r,2))))+(((28284)*((M)*(pow(r,3))))+((-167346)*(pow(r,4))))))))))+(((-8)*((pow(a,14))*((pow(r,3))*(((-10784)*(pow(M,4)))+(((-183364)*((pow(M,3))*(r)))+(((13931)*((pow(M,2))*(pow(r,2))))+(((514412)*((M)*(pow(r,3))))+((286558)*(pow(r,4))))))))))+(((-2)*((pow(a,8))*((pow(r,8))*(((5888)*(pow(M,5)))+(((-97664)*((pow(M,4))*(r)))+(((-2315560)*((pow(M,3))*(pow(r,2))))+(((-4308220)*((pow(M,2))*(pow(r,3))))+(((1227190)*((M)*(pow(r,4))))+((3124265)*(pow(r,5)))))))))))+(((8)*((pow(a,10))*((pow(r,5))*(((512)*(pow(M,6)))+(((-4480)*((pow(M,5))*(r)))+(((44064)*((pow(M,4))*(pow(r,2))))+(((726200)*((pow(M,3))*(pow(r,3))))+(((856910)*((pow(M,2))*(pow(r,4))))+(((-754950)*((M)*(pow(r,5))))+((-822765)*(pow(r,6))))))))))))+((pow(a,12))*(((-24064)*((pow(M,5))*(pow(r,4))))+(((284928)*((pow(M,4))*(pow(r,5))))+(((4038480)*((pow(M,3))*(pow(r,6))))+(((2529800)*((pow(M,2))*(pow(r,7))))+(((-6597180)*((M)*(pow(r,8))))+((-4739190)*(pow(r,9)))))))))))))))))))))+((315)*((pow((pow(a,2))+(pow(r,2)),6))*((((3)*(pow(a,8)))+(((143)*(pow(r,8)))+(((24)*((pow(a,6))*((r)*(((5)*(M))+((3)*(r))))))+(((88)*((pow(a,2))*((pow(r,5))*(((5)*(M))+((4)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(((160)*(pow(M,2)))+(((280)*((M)*(r)))+((139)*(pow(r,2))))))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_136(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[136] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.0006510416666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667"))*((HighPrecisionScalar("0.7587869106393281462690342781122674276441125639702901794971577937282469954573703412035671243024329437"))*((pow(a,-13))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-7))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((2)*(pow(a,4)))+(((-1)*((pow(a,2))*((r)*(((6)*(M))+(r)))))+((2)*((pow(r,2))*(((2)*(pow(M,2)))+(((11)*((M)*(r)))+((-6)*(pow(r,2)))))))))*(((a)*((r)*(((-765765)*((((2)*(M))+((-1)*(r)))*(pow(r,24))))+(((45687)*((pow(a,24))*(((2)*(M))+(r))))+(((30030)*((pow(a,2))*((pow(r,21))*(((-250)*(pow(M,2)))+(((-362)*((M)*(r)))+((269)*(pow(r,2))))))))+(((2)*((pow(a,22))*((r)*(((604798)*(pow(M,2)))+(((1153042)*((M)*(r)))+((448165)*(pow(r,2))))))))+(((-12012)*((pow(a,4))*((pow(r,18))*(((1012)*(pow(M,3)))+(((4732)*((pow(M,2))*(r)))+(((2299)*((M)*(pow(r,2))))+((-3224)*(pow(r,3)))))))))+(((4)*((pow(a,20))*((pow(r,2))*(((6148)*(pow(M,3)))+(((3033212)*((pow(M,2))*(r)))+(((4838671)*((M)*(pow(r,2))))+((1798862)*(pow(r,3)))))))))+(((-66)*((pow(a,6))*((pow(r,15))*(((102848)*(pow(M,4)))+(((1267776)*((pow(M,3))*(r)))+(((2786538)*((pow(M,2))*(pow(r,2))))+(((178806)*((M)*(pow(r,3))))+((-1688265)*(pow(r,4))))))))))+(((2)*((pow(a,18))*((pow(r,3))*(((-2627264)*(pow(M,4)))+(((-5156160)*((pow(M,3))*(r)))+(((23441010)*((pow(M,2))*(pow(r,2))))+(((42093618)*((M)*(pow(r,3))))+((16365111)*(pow(r,4))))))))))+(((-11)*((pow(a,8))*((pow(r,12))*(((41984)*(pow(M,5)))+(((3597568)*((pow(M,4))*(r)))+(((22408640)*((pow(M,3))*(pow(r,2))))+(((29576960)*((pow(M,2))*(pow(r,3))))+(((-9160166)*((M)*(pow(r,4))))+((-19450447)*(pow(r,5)))))))))))+(((pow(a,16))*((pow(r,4))*(((-793600)*(pow(M,5)))+(((-33511168)*((pow(M,4))*(r)))+(((-74858816)*((pow(M,3))*(pow(r,2))))+(((82433152)*((pow(M,2))*(pow(r,3))))+(((221750074)*((M)*(pow(r,4))))+((96054175)*(pow(r,5))))))))))+(((4)*((pow(a,14))*((pow(r,5))*(((34816)*(pow(M,6)))+(((-689152)*((pow(M,5))*(r)))+(((-22053920)*((pow(M,4))*(pow(r,2))))+(((-57717216)*((pow(M,3))*(pow(r,3))))+(((7402534)*((pow(M,2))*(pow(r,4))))+(((94302194)*((M)*(pow(r,5))))+((48498625)*(pow(r,6))))))))))))+(((4)*((pow(a,10))*((pow(r,9))*(((20480)*(pow(M,6)))+(((-523264)*((pow(M,5))*(r)))+(((-23934880)*((pow(M,4))*(pow(r,2))))+(((-100695392)*((pow(M,3))*(pow(r,3))))+(((-81469438)*((pow(M,2))*(pow(r,4))))+(((72865946)*((M)*(pow(r,5))))+((72061727)*(pow(r,6))))))))))))+((-8)*((pow(a,12))*((pow(r,6))*(((2048)*(pow(M,7)))+(((-27648)*((pow(M,6))*(r)))+(((449280)*((pow(M,5))*(pow(r,2))))+(((15364160)*((pow(M,4))*(pow(r,3))))+(((49268820)*((pow(M,3))*(pow(r,4))))+(((18996708)*((pow(M,2))*(pow(r,5))))+(((-52460373)*((M)*(pow(r,6))))+((-34828605)*(pow(r,7)))))))))))))))))))))))))))+((-3465)*((pow((pow(a,2))+(pow(r,2)),6))*(((pow(a,12))+(((221)*(pow(r,12)))+(((6)*((pow(a,10))*((r)*(((12)*(M))+((7)*(r))))))+(((78)*((pow(a,2))*((pow(r,9))*(((12)*(M))+((11)*(r))))))+(((39)*((pow(a,4))*((pow(r,6))*(((32)*(pow(M,2)))+(((64)*((M)*(r)))+((33)*(pow(r,2))))))))+(((3)*((pow(a,8))*((pow(r,2))*(((160)*(pow(M,2)))+(((256)*((M)*(r)))+((105)*(pow(r,2))))))))+((4)*((pow(a,6))*((pow(r,3))*(((128)*(pow(M,3)))+(((432)*((pow(M,2))*(r)))+(((564)*((M)*(pow(r,2))))+((231)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3]))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_137(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[137] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.001302083333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"))*((HighPrecisionScalar("0.7587869106393281462690342781122674276441125639702901794971577937282469954573703412035671243024329437"))*((pow(a,-11))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-6))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((a)*((r)*(((-765765)*((((2)*(M))+((-1)*(r)))*(pow(r,24))))+(((45687)*((pow(a,24))*(((2)*(M))+(r))))+(((30030)*((pow(a,2))*((pow(r,21))*(((-250)*(pow(M,2)))+(((-362)*((M)*(r)))+((269)*(pow(r,2))))))))+(((2)*((pow(a,22))*((r)*(((604798)*(pow(M,2)))+(((1153042)*((M)*(r)))+((448165)*(pow(r,2))))))))+(((-12012)*((pow(a,4))*((pow(r,18))*(((1012)*(pow(M,3)))+(((4732)*((pow(M,2))*(r)))+(((2299)*((M)*(pow(r,2))))+((-3224)*(pow(r,3)))))))))+(((4)*((pow(a,20))*((pow(r,2))*(((6148)*(pow(M,3)))+(((3033212)*((pow(M,2))*(r)))+(((4838671)*((M)*(pow(r,2))))+((1798862)*(pow(r,3)))))))))+(((-66)*((pow(a,6))*((pow(r,15))*(((102848)*(pow(M,4)))+(((1267776)*((pow(M,3))*(r)))+(((2786538)*((pow(M,2))*(pow(r,2))))+(((178806)*((M)*(pow(r,3))))+((-1688265)*(pow(r,4))))))))))+(((2)*((pow(a,18))*((pow(r,3))*(((-2627264)*(pow(M,4)))+(((-5156160)*((pow(M,3))*(r)))+(((23441010)*((pow(M,2))*(pow(r,2))))+(((42093618)*((M)*(pow(r,3))))+((16365111)*(pow(r,4))))))))))+(((-11)*((pow(a,8))*((pow(r,12))*(((41984)*(pow(M,5)))+(((3597568)*((pow(M,4))*(r)))+(((22408640)*((pow(M,3))*(pow(r,2))))+(((29576960)*((pow(M,2))*(pow(r,3))))+(((-9160166)*((M)*(pow(r,4))))+((-19450447)*(pow(r,5)))))))))))+(((pow(a,16))*((pow(r,4))*(((-793600)*(pow(M,5)))+(((-33511168)*((pow(M,4))*(r)))+(((-74858816)*((pow(M,3))*(pow(r,2))))+(((82433152)*((pow(M,2))*(pow(r,3))))+(((221750074)*((M)*(pow(r,4))))+((96054175)*(pow(r,5))))))))))+(((4)*((pow(a,14))*((pow(r,5))*(((34816)*(pow(M,6)))+(((-689152)*((pow(M,5))*(r)))+(((-22053920)*((pow(M,4))*(pow(r,2))))+(((-57717216)*((pow(M,3))*(pow(r,3))))+(((7402534)*((pow(M,2))*(pow(r,4))))+(((94302194)*((M)*(pow(r,5))))+((48498625)*(pow(r,6))))))))))))+(((4)*((pow(a,10))*((pow(r,9))*(((20480)*(pow(M,6)))+(((-523264)*((pow(M,5))*(r)))+(((-23934880)*((pow(M,4))*(pow(r,2))))+(((-100695392)*((pow(M,3))*(pow(r,3))))+(((-81469438)*((pow(M,2))*(pow(r,4))))+(((72865946)*((M)*(pow(r,5))))+((72061727)*(pow(r,6))))))))))))+((-8)*((pow(a,12))*((pow(r,6))*(((2048)*(pow(M,7)))+(((-27648)*((pow(M,6))*(r)))+(((449280)*((pow(M,5))*(pow(r,2))))+(((15364160)*((pow(M,4))*(pow(r,3))))+(((49268820)*((pow(M,3))*(pow(r,4))))+(((18996708)*((pow(M,2))*(pow(r,5))))+(((-52460373)*((M)*(pow(r,6))))+((-34828605)*(pow(r,7)))))))))))))))))))))))))))+((-3465)*((pow((pow(a,2))+(pow(r,2)),6))*(((pow(a,12))+(((221)*(pow(r,12)))+(((6)*((pow(a,10))*((r)*(((12)*(M))+((7)*(r))))))+(((78)*((pow(a,2))*((pow(r,9))*(((12)*(M))+((11)*(r))))))+(((39)*((pow(a,4))*((pow(r,6))*(((32)*(pow(M,2)))+(((64)*((M)*(r)))+((33)*(pow(r,2))))))))+(((3)*((pow(a,8))*((pow(r,2))*(((160)*(pow(M,2)))+(((256)*((M)*(r)))+((105)*(pow(r,2))))))))+((4)*((pow(a,6))*((pow(r,3))*(((128)*(pow(M,3)))+(((432)*((pow(M,2))*(r)))+(((564)*((M)*(pow(r,2))))+((231)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_138(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[138] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.0006510416666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667"))*((HighPrecisionScalar("0.7587869106393281462690342781122674276441125639702901794971577937282469954573703412035671243024329437"))*((pow(a,-13))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-7))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*(((a)*((r)*(((-765765)*((((2)*(M))+((-1)*(r)))*(pow(r,24))))+(((45687)*((pow(a,24))*(((2)*(M))+(r))))+(((30030)*((pow(a,2))*((pow(r,21))*(((-250)*(pow(M,2)))+(((-362)*((M)*(r)))+((269)*(pow(r,2))))))))+(((2)*((pow(a,22))*((r)*(((604798)*(pow(M,2)))+(((1153042)*((M)*(r)))+((448165)*(pow(r,2))))))))+(((-12012)*((pow(a,4))*((pow(r,18))*(((1012)*(pow(M,3)))+(((4732)*((pow(M,2))*(r)))+(((2299)*((M)*(pow(r,2))))+((-3224)*(pow(r,3)))))))))+(((4)*((pow(a,20))*((pow(r,2))*(((6148)*(pow(M,3)))+(((3033212)*((pow(M,2))*(r)))+(((4838671)*((M)*(pow(r,2))))+((1798862)*(pow(r,3)))))))))+(((-66)*((pow(a,6))*((pow(r,15))*(((102848)*(pow(M,4)))+(((1267776)*((pow(M,3))*(r)))+(((2786538)*((pow(M,2))*(pow(r,2))))+(((178806)*((M)*(pow(r,3))))+((-1688265)*(pow(r,4))))))))))+(((2)*((pow(a,18))*((pow(r,3))*(((-2627264)*(pow(M,4)))+(((-5156160)*((pow(M,3))*(r)))+(((23441010)*((pow(M,2))*(pow(r,2))))+(((42093618)*((M)*(pow(r,3))))+((16365111)*(pow(r,4))))))))))+(((-11)*((pow(a,8))*((pow(r,12))*(((41984)*(pow(M,5)))+(((3597568)*((pow(M,4))*(r)))+(((22408640)*((pow(M,3))*(pow(r,2))))+(((29576960)*((pow(M,2))*(pow(r,3))))+(((-9160166)*((M)*(pow(r,4))))+((-19450447)*(pow(r,5)))))))))))+(((pow(a,16))*((pow(r,4))*(((-793600)*(pow(M,5)))+(((-33511168)*((pow(M,4))*(r)))+(((-74858816)*((pow(M,3))*(pow(r,2))))+(((82433152)*((pow(M,2))*(pow(r,3))))+(((221750074)*((M)*(pow(r,4))))+((96054175)*(pow(r,5))))))))))+(((4)*((pow(a,14))*((pow(r,5))*(((34816)*(pow(M,6)))+(((-689152)*((pow(M,5))*(r)))+(((-22053920)*((pow(M,4))*(pow(r,2))))+(((-57717216)*((pow(M,3))*(pow(r,3))))+(((7402534)*((pow(M,2))*(pow(r,4))))+(((94302194)*((M)*(pow(r,5))))+((48498625)*(pow(r,6))))))))))))+(((4)*((pow(a,10))*((pow(r,9))*(((20480)*(pow(M,6)))+(((-523264)*((pow(M,5))*(r)))+(((-23934880)*((pow(M,4))*(pow(r,2))))+(((-100695392)*((pow(M,3))*(pow(r,3))))+(((-81469438)*((pow(M,2))*(pow(r,4))))+(((72865946)*((M)*(pow(r,5))))+((72061727)*(pow(r,6))))))))))))+((-8)*((pow(a,12))*((pow(r,6))*(((2048)*(pow(M,7)))+(((-27648)*((pow(M,6))*(r)))+(((449280)*((pow(M,5))*(pow(r,2))))+(((15364160)*((pow(M,4))*(pow(r,3))))+(((49268820)*((pow(M,3))*(pow(r,4))))+(((18996708)*((pow(M,2))*(pow(r,5))))+(((-52460373)*((M)*(pow(r,6))))+((-34828605)*(pow(r,7)))))))))))))))))))))))))))+((-3465)*((pow((pow(a,2))+(pow(r,2)),6))*(((pow(a,12))+(((221)*(pow(r,12)))+(((6)*((pow(a,10))*((r)*(((12)*(M))+((7)*(r))))))+(((78)*((pow(a,2))*((pow(r,9))*(((12)*(M))+((11)*(r))))))+(((39)*((pow(a,4))*((pow(r,6))*(((32)*(pow(M,2)))+(((64)*((M)*(r)))+((33)*(pow(r,2))))))))+(((3)*((pow(a,8))*((pow(r,2))*(((160)*(pow(M,2)))+(((256)*((M)*(r)))+((105)*(pow(r,2))))))))+((4)*((pow(a,6))*((pow(r,3))*(((128)*(pow(M,3)))+(((432)*((pow(M,2))*(r)))+(((564)*((M)*(pow(r,2))))+((231)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_139(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[139] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("0.007812500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("0.7587869106393281462690342781122674276441125639702901794971577937282469954573703412035671243024329437"))*((pow(a,-12))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-7))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((a)*((r)*(((765765)*((((2)*(M))+((-1)*(r)))*(pow(r,24))))+(((-45687)*((pow(a,24))*(((2)*(M))+(r))))+(((30030)*((pow(a,2))*((pow(r,21))*(((250)*(pow(M,2)))+(((362)*((M)*(r)))+((-269)*(pow(r,2))))))))+(((-2)*((pow(a,22))*((r)*(((604798)*(pow(M,2)))+(((1153042)*((M)*(r)))+((448165)*(pow(r,2))))))))+(((12012)*((pow(a,4))*((pow(r,18))*(((1012)*(pow(M,3)))+(((4732)*((pow(M,2))*(r)))+(((2299)*((M)*(pow(r,2))))+((-3224)*(pow(r,3)))))))))+(((-4)*((pow(a,20))*((pow(r,2))*(((6148)*(pow(M,3)))+(((3033212)*((pow(M,2))*(r)))+(((4838671)*((M)*(pow(r,2))))+((1798862)*(pow(r,3)))))))))+(((66)*((pow(a,6))*((pow(r,15))*(((102848)*(pow(M,4)))+(((1267776)*((pow(M,3))*(r)))+(((2786538)*((pow(M,2))*(pow(r,2))))+(((178806)*((M)*(pow(r,3))))+((-1688265)*(pow(r,4))))))))))+(((-2)*((pow(a,18))*((pow(r,3))*(((-2627264)*(pow(M,4)))+(((-5156160)*((pow(M,3))*(r)))+(((23441010)*((pow(M,2))*(pow(r,2))))+(((42093618)*((M)*(pow(r,3))))+((16365111)*(pow(r,4))))))))))+(((pow(a,16))*((pow(r,4))*(((793600)*(pow(M,5)))+(((33511168)*((pow(M,4))*(r)))+(((74858816)*((pow(M,3))*(pow(r,2))))+(((-82433152)*((pow(M,2))*(pow(r,3))))+(((-221750074)*((M)*(pow(r,4))))+((-96054175)*(pow(r,5))))))))))+(((11)*((pow(a,8))*((pow(r,12))*(((41984)*(pow(M,5)))+(((3597568)*((pow(M,4))*(r)))+(((22408640)*((pow(M,3))*(pow(r,2))))+(((29576960)*((pow(M,2))*(pow(r,3))))+(((-9160166)*((M)*(pow(r,4))))+((-19450447)*(pow(r,5)))))))))))+(((-4)*((pow(a,14))*((pow(r,5))*(((34816)*(pow(M,6)))+(((-689152)*((pow(M,5))*(r)))+(((-22053920)*((pow(M,4))*(pow(r,2))))+(((-57717216)*((pow(M,3))*(pow(r,3))))+(((7402534)*((pow(M,2))*(pow(r,4))))+(((94302194)*((M)*(pow(r,5))))+((48498625)*(pow(r,6))))))))))))+(((-4)*((pow(a,10))*((pow(r,9))*(((20480)*(pow(M,6)))+(((-523264)*((pow(M,5))*(r)))+(((-23934880)*((pow(M,4))*(pow(r,2))))+(((-100695392)*((pow(M,3))*(pow(r,3))))+(((-81469438)*((pow(M,2))*(pow(r,4))))+(((72865946)*((M)*(pow(r,5))))+((72061727)*(pow(r,6))))))))))))+((8)*((pow(a,12))*((pow(r,6))*(((2048)*(pow(M,7)))+(((-27648)*((pow(M,6))*(r)))+(((449280)*((pow(M,5))*(pow(r,2))))+(((15364160)*((pow(M,4))*(pow(r,3))))+(((49268820)*((pow(M,3))*(pow(r,4))))+(((18996708)*((pow(M,2))*(pow(r,5))))+(((-52460373)*((M)*(pow(r,6))))+((-34828605)*(pow(r,7)))))))))))))))))))))))))))+((3465)*((pow((pow(a,2))+(pow(r,2)),6))*(((pow(a,12))+(((221)*(pow(r,12)))+(((6)*((pow(a,10))*((r)*(((12)*(M))+((7)*(r))))))+(((78)*((pow(a,2))*((pow(r,9))*(((12)*(M))+((11)*(r))))))+(((39)*((pow(a,4))*((pow(r,6))*(((32)*(pow(M,2)))+(((64)*((M)*(r)))+((33)*(pow(r,2))))))))+(((3)*((pow(a,8))*((pow(r,2))*(((160)*(pow(M,2)))+(((256)*((M)*(r)))+((105)*(pow(r,2))))))))+((4)*((pow(a,6))*((pow(r,3))*(((128)*(pow(M,3)))+(((432)*((pow(M,2))*(r)))+(((564)*((M)*(pow(r,2))))+((231)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

}
