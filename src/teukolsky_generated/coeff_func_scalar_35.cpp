
#include "../teukolsky.hpp"

namespace Teukolsky {

void compute_coeffs_scalar_175(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[175] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("1.166666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667"))*((pow(a,-5))*((pow(r,-1))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-3))*((((3)*(pow(a,4)))+(((5)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+((2)*(r))))))))*(((4)*(pow(a,7)))+(((15)*((a)*((pow(r,5))*(((-2)*(M))+(r)))))+(((pow(a,5))*((r)*(((14)*(M))+((23)*(r)))))+(((2)*((pow(a,3))*((pow(r,2))*(((-22)*(pow(M,2)))+(((-8)*((M)*(r)))+((17)*(pow(r,2))))))))+((-3)*((((3)*(pow(a,4)))+(((5)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+((2)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3]))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_176(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[176] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.5833333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"))*((pow(a,-7))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-4))*((((3)*(pow(a,4)))+(((5)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+((2)*(r))))))))*(((4)*(pow(a,7)))+(((15)*((a)*((pow(r,5))*(((-2)*(M))+(r)))))+(((pow(a,5))*((r)*(((14)*(M))+((23)*(r)))))+(((2)*((pow(a,3))*((pow(r,2))*(((-22)*(pow(M,2)))+(((-8)*((M)*(r)))+((17)*(pow(r,2))))))))+((-3)*((((3)*(pow(a,4)))+(((5)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+((2)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3]))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_177(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[177] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.004166666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667"))*((HighPrecisionScalar("8.774964387392122060406388307416309560875876827554503590927695629782764646219306281675693157068705756"))*((pow(a,-9))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-4))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((3)*(pow(a,6)))+(((pow(a,4))*(((M)+((-10)*(r)))*(r)))+(((-5)*((pow(r,5))*((M)+((6)*(r)))))+((-1)*((pow(a,2))*((pow(r,2))*(((4)*(pow(M,2)))+(((32)*((M)*(r)))+((43)*(pow(r,2)))))))))))*((expr[2])*(((a)*((((64)*(pow(a,8)))+(((945)*(pow(r,8)))+(((105)*((pow(a,2))*((pow(r,5))*(((22)*(M))+((25)*(r))))))+(((pow(a,6))*((r)*(((1214)*(M))+((863)*(r)))))+((pow(a,4))*((pow(r,2))*(((1096)*(pow(M,2)))+(((3524)*((M)*(r)))+((2479)*(pow(r,2)))))))))))*((((pow(r,4))*(((-2)*(M))+(r)))+(((pow(a,4))*(((2)*(M))+(r)))+(((pow(a,2))*(((-4)*((pow(M,2))*(r)))+((2)*(pow(r,3)))))+((pow(expr[0],2))*(pow(expr[1],2))))))*(expr[2]))))+((-30)*((r)*((((63)*(pow(r,11)))+(((15)*((pow(a,10))*(((2)*(M))+(r))))+(((7)*((pow(a,2))*((pow(r,8))*(((34)*(M))+((37)*(r))))))+(((5)*((pow(a,8))*((r)*(((32)*(pow(M,2)))+(((56)*((M)*(r)))+((23)*(pow(r,2))))))))+(((2)*((pow(a,4))*((pow(r,5))*(((128)*(pow(M,2)))+(((348)*((M)*(r)))+((207)*(pow(r,2))))))))+((2)*((pow(a,6))*((pow(r,2))*(((32)*(pow(M,3)))+(((208)*((pow(M,2))*(r)))+(((354)*((M)*(pow(r,2))))+((159)*(pow(r,3))))))))))))))*((expr[0])*((expr[1])*(expr[3]))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_178(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[178] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.008333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"))*((HighPrecisionScalar("8.774964387392122060406388307416309560875876827554503590927695629782764646219306281675693157068705756"))*((pow(a,-7))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-4))*((((3)*(pow(a,4)))+(((5)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+((2)*(r))))))))*((expr[2])*(((((64)*(pow(a,11)))+(((945)*((a)*((pow(r,9))*(((-2)*(M))+(r)))))+(((3)*((pow(a,9))*((r)*(((362)*(M))+((309)*(r))))))+(((210)*((pow(a,3))*((pow(r,6))*(((-22)*(pow(M,2)))+(((-14)*((M)*(r)))+((17)*(pow(r,2))))))))+(((6)*((pow(a,7))*((pow(r,2))*(((-222)*(pow(M,2)))+(((502)*((M)*(r)))+((557)*(pow(r,2))))))))+((4)*((pow(a,5))*((pow(r,3))*(((-548)*(pow(M,3)))+(((-1488)*((pow(M,2))*(r)))+(((219)*((M)*(pow(r,2))))+((1276)*(pow(r,3))))))))))))))*(expr[2]))+((-15)*((r)*((((15)*(pow(a,8)))+(((63)*(pow(r,8)))+(((20)*((pow(a,6))*((r)*(((4)*(M))+((5)*(r))))))+(((28)*((pow(a,2))*((pow(r,5))*(((4)*(M))+((7)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(((16)*(pow(M,2)))+(((96)*((M)*(r)))+((109)*(pow(r,2))))))))))))*((expr[0])*((expr[1])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_179(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[179] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.004166666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667"))*((HighPrecisionScalar("8.774964387392122060406388307416309560875876827554503590927695629782764646219306281675693157068705756"))*((pow(a,-9))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-5))*((((3)*(pow(a,4)))+(((5)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+((2)*(r))))))))*(((64)*(pow(a,11)))+(((945)*((a)*((pow(r,9))*(((-2)*(M))+(r)))))+(((3)*((pow(a,9))*((r)*(((362)*(M))+((309)*(r))))))+(((210)*((pow(a,3))*((pow(r,6))*(((-22)*(pow(M,2)))+(((-14)*((M)*(r)))+((17)*(pow(r,2))))))))+(((6)*((pow(a,7))*((pow(r,2))*(((-222)*(pow(M,2)))+(((502)*((M)*(r)))+((557)*(pow(r,2))))))))+(((4)*((pow(a,5))*((pow(r,3))*(((-548)*(pow(M,3)))+(((-1488)*((pow(M,2))*(r)))+(((219)*((M)*(pow(r,2))))+((1276)*(pow(r,3)))))))))+((-15)*((((15)*(pow(a,8)))+(((63)*(pow(r,8)))+(((20)*((pow(a,6))*((r)*(((4)*(M))+((5)*(r))))))+(((28)*((pow(a,2))*((pow(r,5))*(((4)*(M))+((7)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(((16)*(pow(M,2)))+(((96)*((M)*(r)))+((109)*(pow(r,2))))))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))))))).cast<double>());
}

}
