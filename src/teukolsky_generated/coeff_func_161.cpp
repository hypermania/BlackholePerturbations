
#include "../teukolsky_scalar.hpp"
#include <map>

typedef TeukolskyScalarPDE::HighPrecisionScalar HighPrecisionScalar;


void compute_coeffs_805(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[805] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.000007629394531250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-21))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-11))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*((((7)*(pow(a,16)))+(((4199)*(pow(r,16)))+(((56)*((pow(a,14))*((r)*(((12)*(M))+((7)*(r))))))+(((1768)*((pow(a,2))*((pow(r,13))*(((12)*(M))+((13)*(r))))))+(((28)*((pow(a,12))*((pow(r,2))*(((240)*(pow(M,2)))+(((384)*((M)*(r)))+((151)*(pow(r,2))))))))+(((52)*((pow(a,4))*((pow(r,10))*(((720)*(pow(M,2)))+(((1728)*((M)*(r)))+((1013)*(pow(r,2))))))))+(((56)*((pow(a,10))*((pow(r,3))*(((256)*(pow(M,3)))+(((864)*((pow(M,2))*(r)))+(((972)*((M)*(pow(r,2))))+((345)*(pow(r,3)))))))))+(((104)*((pow(a,6))*((pow(r,7))*(((256)*(pow(M,3)))+(((1056)*((pow(M,2))*(r)))+(((1452)*((M)*(pow(r,2))))+((627)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((3072)*(pow(M,4)))+(((20480)*((pow(M,3))*(r)))+(((57024)*((pow(M,2))*(pow(r,2))))+(((63360)*((M)*(pow(r,3))))+((23397)*(pow(r,4))))))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((368961)*(pow(a,20)))+(((14549535)*(pow(r,20)))+(((1021020)*((pow(a,2))*((pow(r,17))*(((53)*(M))+((116)*(r))))))+(((20)*((pow(a,18))*((r)*(((406247)*(M))+((387604)*(r))))))+(((3003)*((pow(a,4))*((pow(r,14))*(((20896)*(pow(M,2)))+(((123264)*((M)*(r)))+((142159)*(pow(r,2))))))))+(((pow(a,16))*((pow(r,2))*(((29657632)*(pow(M,2)))+(((94657152)*((M)*(r)))+((60579883)*(pow(r,2)))))))+(((6864)*((pow(a,6))*((pow(r,11))*(((3336)*(pow(M,3)))+(((49848)*((pow(M,2))*(r)))+(((159253)*((M)*(pow(r,2))))+((130322)*(pow(r,3)))))))))+(((16)*((pow(a,14))*((pow(r,3))*(((1323624)*(pow(M,3)))+(((13107048)*((pow(M,2))*(r)))+(((28186577)*((M)*(pow(r,2))))+((15780422)*(pow(r,3)))))))))+(((22)*((pow(a,8))*((pow(r,8))*(((35840)*(pow(M,4)))+(((4091648)*((pow(M,3))*(r)))+(((35032080)*((pow(M,2))*(pow(r,2))))+(((82512320)*((M)*(pow(r,3))))+((54630905)*(pow(r,4))))))))))+(((2)*((pow(a,12))*((pow(r,4))*(((465920)*(pow(M,4)))+(((43287808)*((pow(M,3))*(r)))+(((302548560)*((pow(M,2))*(pow(r,2))))+(((586786880)*((M)*(pow(r,3))))+((322460845)*(pow(r,4))))))))))+((8)*((pow(a,10))*((pow(r,5))*(((-7168)*(pow(M,5)))+(((215040)*((pow(M,4))*(r)))+(((16564448)*((pow(M,3))*(pow(r,2))))+(((114542720)*((pow(M,2))*(pow(r,3))))+(((230915865)*((M)*(pow(r,4))))+((134499512)*(pow(r,5)))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((3465)*((pow((pow(a,2))+(pow(r,2)),4))*((((7)*(pow(a,16)))+(((4199)*(pow(r,16)))+(((56)*((pow(a,14))*((r)*(((12)*(M))+((7)*(r))))))+(((1768)*((pow(a,2))*((pow(r,13))*(((12)*(M))+((13)*(r))))))+(((28)*((pow(a,12))*((pow(r,2))*(((240)*(pow(M,2)))+(((384)*((M)*(r)))+((151)*(pow(r,2))))))))+(((52)*((pow(a,4))*((pow(r,10))*(((720)*(pow(M,2)))+(((1728)*((M)*(r)))+((1013)*(pow(r,2))))))))+(((56)*((pow(a,10))*((pow(r,3))*(((256)*(pow(M,3)))+(((864)*((pow(M,2))*(r)))+(((972)*((M)*(pow(r,2))))+((345)*(pow(r,3)))))))))+(((104)*((pow(a,6))*((pow(r,7))*(((256)*(pow(M,3)))+(((1056)*((pow(M,2))*(r)))+(((1452)*((M)*(pow(r,2))))+((627)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((3072)*(pow(M,4)))+(((20480)*((pow(M,3))*(r)))+(((57024)*((pow(M,2))*(pow(r,2))))+(((63360)*((M)*(pow(r,3))))+((23397)*(pow(r,4))))))))))))))))))*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_806(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[806] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("-0.00006103515625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-20))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-11))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((7)*(pow(a,16)))+(((4199)*(pow(r,16)))+(((56)*((pow(a,14))*((r)*(((12)*(M))+((7)*(r))))))+(((1768)*((pow(a,2))*((pow(r,13))*(((12)*(M))+((13)*(r))))))+(((28)*((pow(a,12))*((pow(r,2))*(((240)*(pow(M,2)))+(((384)*((M)*(r)))+((151)*(pow(r,2))))))))+(((52)*((pow(a,4))*((pow(r,10))*(((720)*(pow(M,2)))+(((1728)*((M)*(r)))+((1013)*(pow(r,2))))))))+(((56)*((pow(a,10))*((pow(r,3))*(((256)*(pow(M,3)))+(((864)*((pow(M,2))*(r)))+(((972)*((M)*(pow(r,2))))+((345)*(pow(r,3)))))))))+(((104)*((pow(a,6))*((pow(r,7))*(((256)*(pow(M,3)))+(((1056)*((pow(M,2))*(r)))+(((1452)*((M)*(pow(r,2))))+((627)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((3072)*(pow(M,4)))+(((20480)*((pow(M,3))*(r)))+(((57024)*((pow(M,2))*(pow(r,2))))+(((63360)*((M)*(pow(r,3))))+((23397)*(pow(r,4))))))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((368961)*(pow(a,20)))+(((14549535)*(pow(r,20)))+(((1021020)*((pow(a,2))*((pow(r,17))*(((53)*(M))+((116)*(r))))))+(((20)*((pow(a,18))*((r)*(((406247)*(M))+((387604)*(r))))))+(((3003)*((pow(a,4))*((pow(r,14))*(((20896)*(pow(M,2)))+(((123264)*((M)*(r)))+((142159)*(pow(r,2))))))))+(((pow(a,16))*((pow(r,2))*(((29657632)*(pow(M,2)))+(((94657152)*((M)*(r)))+((60579883)*(pow(r,2)))))))+(((6864)*((pow(a,6))*((pow(r,11))*(((3336)*(pow(M,3)))+(((49848)*((pow(M,2))*(r)))+(((159253)*((M)*(pow(r,2))))+((130322)*(pow(r,3)))))))))+(((16)*((pow(a,14))*((pow(r,3))*(((1323624)*(pow(M,3)))+(((13107048)*((pow(M,2))*(r)))+(((28186577)*((M)*(pow(r,2))))+((15780422)*(pow(r,3)))))))))+(((22)*((pow(a,8))*((pow(r,8))*(((35840)*(pow(M,4)))+(((4091648)*((pow(M,3))*(r)))+(((35032080)*((pow(M,2))*(pow(r,2))))+(((82512320)*((M)*(pow(r,3))))+((54630905)*(pow(r,4))))))))))+(((2)*((pow(a,12))*((pow(r,4))*(((465920)*(pow(M,4)))+(((43287808)*((pow(M,3))*(r)))+(((302548560)*((pow(M,2))*(pow(r,2))))+(((586786880)*((M)*(pow(r,3))))+((322460845)*(pow(r,4))))))))))+((8)*((pow(a,10))*((pow(r,5))*(((-7168)*(pow(M,5)))+(((215040)*((pow(M,4))*(r)))+(((16564448)*((pow(M,3))*(pow(r,2))))+(((114542720)*((pow(M,2))*(pow(r,3))))+(((230915865)*((M)*(pow(r,4))))+((134499512)*(pow(r,5)))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((3465)*((pow((pow(a,2))+(pow(r,2)),4))*((((7)*(pow(a,16)))+(((4199)*(pow(r,16)))+(((56)*((pow(a,14))*((r)*(((12)*(M))+((7)*(r))))))+(((1768)*((pow(a,2))*((pow(r,13))*(((12)*(M))+((13)*(r))))))+(((28)*((pow(a,12))*((pow(r,2))*(((240)*(pow(M,2)))+(((384)*((M)*(r)))+((151)*(pow(r,2))))))))+(((52)*((pow(a,4))*((pow(r,10))*(((720)*(pow(M,2)))+(((1728)*((M)*(r)))+((1013)*(pow(r,2))))))))+(((56)*((pow(a,10))*((pow(r,3))*(((256)*(pow(M,3)))+(((864)*((pow(M,2))*(r)))+(((972)*((M)*(pow(r,2))))+((345)*(pow(r,3)))))))))+(((104)*((pow(a,6))*((pow(r,7))*(((256)*(pow(M,3)))+(((1056)*((pow(M,2))*(r)))+(((1452)*((M)*(pow(r,2))))+((627)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((3072)*(pow(M,4)))+(((20480)*((pow(M,3))*(r)))+(((57024)*((pow(M,2))*(pow(r,2))))+(((63360)*((M)*(pow(r,3))))+((23397)*(pow(r,4))))))))))))))))))*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_807(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[807] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.001302083333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"))*((HighPrecisionScalar("0.1139605764596379488364466013950170072841022964617467998821778653218540863145364452165674435982948799"))*((pow(a,-13))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-7))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((2)*(pow(a,4)))+(((-1)*((pow(a,2))*((r)*(((6)*(M))+((107)*(r))))))+((2)*((pow(r,2))*(((2)*(pow(M,2)))+(((109)*((M)*(r)))+((-55)*(pow(r,2)))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((32768)*(pow(a,20)))+(((14549535)*(pow(r,20)))+(((255255)*((pow(a,2))*((pow(r,17))*(((278)*(M))+((431)*(r))))))+(((5)*((pow(a,18))*((r)*(((568042)*(M))+((349557)*(r))))))+(((12012)*((pow(a,4))*((pow(r,14))*(((9954)*(pow(M,2)))+(((37306)*((M)*(r)))+((30411)*(pow(r,2))))))))+(((5)*((pow(a,16))*((pow(r,2))*(((5026200)*(pow(M,2)))+(((9570536)*((M)*(r)))+((4107651)*(pow(r,2))))))))+(((1716)*((pow(a,6))*((pow(r,11))*(((46608)*(pow(M,3)))+(((348156)*((pow(M,2))*(r)))+(((705080)*((M)*(pow(r,2))))+((406635)*(pow(r,3)))))))))+(((4)*((pow(a,14))*((pow(r,3))*(((11537744)*(pow(M,3)))+(((55003116)*((pow(M,2))*(r)))+(((72514028)*((M)*(pow(r,2))))+((27771703)*(pow(r,3)))))))))+(((22)*((pow(a,8))*((pow(r,8))*(((783488)*(pow(M,4)))+(((12974720)*((pow(M,3))*(r)))+(((55432812)*((pow(M,2))*(pow(r,2))))+(((82462820)*((M)*(pow(r,3))))+((38323295)*(pow(r,4))))))))))+(((4)*((pow(a,12))*((pow(r,4))*(((4147904)*(pow(M,4)))+(((54446784)*((pow(M,3))*(r)))+(((186996186)*((pow(M,2))*(pow(r,2))))+(((225694490)*((M)*(pow(r,3))))+((85876545)*(pow(r,4))))))))))+((2)*((pow(a,10))*((pow(r,5))*(((129024)*(pow(M,5)))+(((16914176)*((pow(M,4))*(r)))+(((188550336)*((pow(M,3))*(pow(r,2))))+(((647378448)*((pow(M,2))*(pow(r,3))))+(((819578930)*((M)*(pow(r,4))))+((333200499)*(pow(r,5)))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((3465)*((r)*((pow((pow(a,2))+(pow(r,2)),2))*((((4199)*(pow(r,19)))+(((63)*((pow(a,18))*(((2)*(M))+(r))))+(((221)*((pow(a,2))*((pow(r,16))*(((118)*(M))+((131)*(r))))))+(((21)*((pow(a,16))*((r)*(((160)*(pow(M,2)))+(((208)*((M)*(r)))+((67)*(pow(r,2))))))))+(((52)*((pow(a,4))*((pow(r,13))*(((1160)*(pow(M,2)))+(((2852)*((M)*(r)))+((1667)*(pow(r,2))))))))+(((84)*((pow(a,14))*((pow(r,2))*(((192)*(pow(M,3)))+(((528)*((pow(M,2))*(r)))+(((466)*((M)*(pow(r,2))))+((131)*(pow(r,3)))))))))+(((52)*((pow(a,6))*((pow(r,10))*(((1216)*(pow(M,3)))+(((5136)*((pow(M,2))*(r)))+(((6834)*((M)*(pow(r,2))))+((2831)*(pow(r,3)))))))))+(((12)*((pow(a,12))*((pow(r,3))*(((1536)*(pow(M,4)))+(((8448)*((pow(M,3))*(r)))+(((16584)*((pow(M,2))*(pow(r,2))))+(((13284)*((M)*(pow(r,3))))+((3673)*(pow(r,4))))))))))+(((2)*((pow(a,8))*((pow(r,7))*(((14336)*(pow(M,4)))+(((97792)*((pow(M,3))*(r)))+(((236784)*((pow(M,2))*(pow(r,2))))+(((231928)*((M)*(pow(r,3))))+((77609)*(pow(r,4))))))))))+((2)*((pow(a,10))*((pow(r,4))*(((2048)*(pow(M,5)))+(((23552)*((pow(M,4))*(r)))+(((108800)*((pow(M,3))*(pow(r,2))))+(((212416)*((pow(M,2))*(pow(r,3))))+(((177610)*((M)*(pow(r,4))))+((52177)*(pow(r,5))))))))))))))))))))*(expr[3])))))))))))))))).cast<double>());
}

void compute_coeffs_808(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[808] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.001953125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("0.04652421051992354337498703587766604544580913088278088835270993504928320039737946524516015724582979050"))*((pow(a,-15))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-8))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((6)*(pow(a,8)))+(((-1)*((pow(a,6))*((r)*(((2)*(M))+((301)*(r))))))+(((14)*((pow(r,6))*(((2)*(pow(M,2)))+(((109)*((M)*(r)))+((-55)*(pow(r,2)))))))+(((-2)*((pow(a,4))*((pow(r,2))*(((18)*(pow(M,2)))+(((131)*((M)*(r)))+((693)*(pow(r,2))))))))+((pow(a,2))*((pow(r,3))*(((32)*(pow(M,3)))+(((1784)*((pow(M,2))*(r)))+(((1258)*((M)*(pow(r,2))))+((-1849)*(pow(r,3))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((32768)*(pow(a,20)))+(((14549535)*(pow(r,20)))+(((255255)*((pow(a,2))*((pow(r,17))*(((278)*(M))+((431)*(r))))))+(((5)*((pow(a,18))*((r)*(((568042)*(M))+((349557)*(r))))))+(((12012)*((pow(a,4))*((pow(r,14))*(((9954)*(pow(M,2)))+(((37306)*((M)*(r)))+((30411)*(pow(r,2))))))))+(((5)*((pow(a,16))*((pow(r,2))*(((5026200)*(pow(M,2)))+(((9570536)*((M)*(r)))+((4107651)*(pow(r,2))))))))+(((1716)*((pow(a,6))*((pow(r,11))*(((46608)*(pow(M,3)))+(((348156)*((pow(M,2))*(r)))+(((705080)*((M)*(pow(r,2))))+((406635)*(pow(r,3)))))))))+(((4)*((pow(a,14))*((pow(r,3))*(((11537744)*(pow(M,3)))+(((55003116)*((pow(M,2))*(r)))+(((72514028)*((M)*(pow(r,2))))+((27771703)*(pow(r,3)))))))))+(((22)*((pow(a,8))*((pow(r,8))*(((783488)*(pow(M,4)))+(((12974720)*((pow(M,3))*(r)))+(((55432812)*((pow(M,2))*(pow(r,2))))+(((82462820)*((M)*(pow(r,3))))+((38323295)*(pow(r,4))))))))))+(((4)*((pow(a,12))*((pow(r,4))*(((4147904)*(pow(M,4)))+(((54446784)*((pow(M,3))*(r)))+(((186996186)*((pow(M,2))*(pow(r,2))))+(((225694490)*((M)*(pow(r,3))))+((85876545)*(pow(r,4))))))))))+((2)*((pow(a,10))*((pow(r,5))*(((129024)*(pow(M,5)))+(((16914176)*((pow(M,4))*(r)))+(((188550336)*((pow(M,3))*(pow(r,2))))+(((647378448)*((pow(M,2))*(pow(r,3))))+(((819578930)*((M)*(pow(r,4))))+((333200499)*(pow(r,5)))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((3465)*((r)*((pow((pow(a,2))+(pow(r,2)),2))*((((4199)*(pow(r,19)))+(((63)*((pow(a,18))*(((2)*(M))+(r))))+(((221)*((pow(a,2))*((pow(r,16))*(((118)*(M))+((131)*(r))))))+(((21)*((pow(a,16))*((r)*(((160)*(pow(M,2)))+(((208)*((M)*(r)))+((67)*(pow(r,2))))))))+(((52)*((pow(a,4))*((pow(r,13))*(((1160)*(pow(M,2)))+(((2852)*((M)*(r)))+((1667)*(pow(r,2))))))))+(((84)*((pow(a,14))*((pow(r,2))*(((192)*(pow(M,3)))+(((528)*((pow(M,2))*(r)))+(((466)*((M)*(pow(r,2))))+((131)*(pow(r,3)))))))))+(((52)*((pow(a,6))*((pow(r,10))*(((1216)*(pow(M,3)))+(((5136)*((pow(M,2))*(r)))+(((6834)*((M)*(pow(r,2))))+((2831)*(pow(r,3)))))))))+(((12)*((pow(a,12))*((pow(r,3))*(((1536)*(pow(M,4)))+(((8448)*((pow(M,3))*(r)))+(((16584)*((pow(M,2))*(pow(r,2))))+(((13284)*((M)*(pow(r,3))))+((3673)*(pow(r,4))))))))))+(((2)*((pow(a,8))*((pow(r,7))*(((14336)*(pow(M,4)))+(((97792)*((pow(M,3))*(r)))+(((236784)*((pow(M,2))*(pow(r,2))))+(((231928)*((M)*(pow(r,3))))+((77609)*(pow(r,4))))))))))+((2)*((pow(a,10))*((pow(r,4))*(((2048)*(pow(M,5)))+(((23552)*((pow(M,4))*(r)))+(((108800)*((pow(M,3))*(pow(r,2))))+(((212416)*((pow(M,2))*(pow(r,3))))+(((177610)*((M)*(pow(r,4))))+((52177)*(pow(r,5))))))))))))))))))))*(expr[3])))))))))))))))).cast<double>());
}

void compute_coeffs_809(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[809] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.0001627604166666666666666666666666666666666666666666666666666666666666666666666666666666666666666666667"))*((HighPrecisionScalar("0.4861724348043977324610180637835266176226948326674056520450268566538073591160701947111252196130745571"))*((pow(a,-17))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-9))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((10)*(pow(a,12)))+(((5)*((pow(a,10))*((((10)*(M))+((-91)*(r)))*(r))))+(((66)*((pow(r,10))*(((2)*(pow(M,2)))+(((109)*((M)*(r)))+((-55)*(pow(r,2)))))))+(((-2)*((pow(a,8))*((pow(r,2))*(((78)*(pow(M,2)))+(((1603)*((M)*(r)))+((2317)*(pow(r,2))))))))+(((3)*((pow(a,2))*((pow(r,7))*(((96)*(pow(M,3)))+(((5360)*((pow(M,2))*(r)))+(((4270)*((M)*(pow(r,2))))+((-4697)*(pow(r,3)))))))))+(((-2)*((pow(a,6))*((pow(r,3))*(((16)*(pow(M,3)))+(((-2392)*((pow(M,2))*(r)))+(((4054)*((M)*(pow(r,2))))+((7347)*(pow(r,3)))))))))+((2)*((pow(a,4))*((pow(r,4))*(((64)*(pow(M,4)))+(((3712)*((pow(M,3))*(r)))+(((10428)*((pow(M,2))*(pow(r,2))))+(((382)*((M)*(pow(r,3))))+((-10493)*(pow(r,4))))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((32768)*(pow(a,20)))+(((14549535)*(pow(r,20)))+(((255255)*((pow(a,2))*((pow(r,17))*(((278)*(M))+((431)*(r))))))+(((5)*((pow(a,18))*((r)*(((568042)*(M))+((349557)*(r))))))+(((12012)*((pow(a,4))*((pow(r,14))*(((9954)*(pow(M,2)))+(((37306)*((M)*(r)))+((30411)*(pow(r,2))))))))+(((5)*((pow(a,16))*((pow(r,2))*(((5026200)*(pow(M,2)))+(((9570536)*((M)*(r)))+((4107651)*(pow(r,2))))))))+(((1716)*((pow(a,6))*((pow(r,11))*(((46608)*(pow(M,3)))+(((348156)*((pow(M,2))*(r)))+(((705080)*((M)*(pow(r,2))))+((406635)*(pow(r,3)))))))))+(((4)*((pow(a,14))*((pow(r,3))*(((11537744)*(pow(M,3)))+(((55003116)*((pow(M,2))*(r)))+(((72514028)*((M)*(pow(r,2))))+((27771703)*(pow(r,3)))))))))+(((22)*((pow(a,8))*((pow(r,8))*(((783488)*(pow(M,4)))+(((12974720)*((pow(M,3))*(r)))+(((55432812)*((pow(M,2))*(pow(r,2))))+(((82462820)*((M)*(pow(r,3))))+((38323295)*(pow(r,4))))))))))+(((4)*((pow(a,12))*((pow(r,4))*(((4147904)*(pow(M,4)))+(((54446784)*((pow(M,3))*(r)))+(((186996186)*((pow(M,2))*(pow(r,2))))+(((225694490)*((M)*(pow(r,3))))+((85876545)*(pow(r,4))))))))))+((2)*((pow(a,10))*((pow(r,5))*(((129024)*(pow(M,5)))+(((16914176)*((pow(M,4))*(r)))+(((188550336)*((pow(M,3))*(pow(r,2))))+(((647378448)*((pow(M,2))*(pow(r,3))))+(((819578930)*((M)*(pow(r,4))))+((333200499)*(pow(r,5)))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((3465)*((r)*((pow((pow(a,2))+(pow(r,2)),2))*((((4199)*(pow(r,19)))+(((63)*((pow(a,18))*(((2)*(M))+(r))))+(((221)*((pow(a,2))*((pow(r,16))*(((118)*(M))+((131)*(r))))))+(((21)*((pow(a,16))*((r)*(((160)*(pow(M,2)))+(((208)*((M)*(r)))+((67)*(pow(r,2))))))))+(((52)*((pow(a,4))*((pow(r,13))*(((1160)*(pow(M,2)))+(((2852)*((M)*(r)))+((1667)*(pow(r,2))))))))+(((84)*((pow(a,14))*((pow(r,2))*(((192)*(pow(M,3)))+(((528)*((pow(M,2))*(r)))+(((466)*((M)*(pow(r,2))))+((131)*(pow(r,3)))))))))+(((52)*((pow(a,6))*((pow(r,10))*(((1216)*(pow(M,3)))+(((5136)*((pow(M,2))*(r)))+(((6834)*((M)*(pow(r,2))))+((2831)*(pow(r,3)))))))))+(((12)*((pow(a,12))*((pow(r,3))*(((1536)*(pow(M,4)))+(((8448)*((pow(M,3))*(r)))+(((16584)*((pow(M,2))*(pow(r,2))))+(((13284)*((M)*(pow(r,3))))+((3673)*(pow(r,4))))))))))+(((2)*((pow(a,8))*((pow(r,7))*(((14336)*(pow(M,4)))+(((97792)*((pow(M,3))*(r)))+(((236784)*((pow(M,2))*(pow(r,2))))+(((231928)*((M)*(pow(r,3))))+((77609)*(pow(r,4))))))))))+((2)*((pow(a,10))*((pow(r,4))*(((2048)*(pow(M,5)))+(((23552)*((pow(M,4))*(r)))+(((108800)*((pow(M,3))*(pow(r,2))))+(((212416)*((pow(M,2))*(pow(r,3))))+(((177610)*((M)*(pow(r,4))))+((52177)*(pow(r,5))))))))))))))))))))*(expr[3])))))))))))))))).cast<double>());
}
