
#include "../teukolsky.hpp"

namespace Teukolsky {

void compute_coeffs_scalar_80(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[80] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("2.500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-5))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-3))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((2)*(pow(a,4)))+(((3)*(pow(r,4)))+((pow(a,2))*((r)*(((2)*(M))+((5)*(r)))))))*((expr[0])*((expr[1])*(expr[2]))))))+((3)*((r)*((pow((pow(a,2))+(pow(r,2)),2))*(((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))))*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_81(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[81] = std::complex<double>(0.0,1.0)*(((-5)*((pow(a,-4))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-3))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((expr[0])*(((a)*((((2)*(pow(a,4)))+(((3)*(pow(r,4)))+((pow(a,2))*((r)*(((2)*(M))+((5)*(r)))))))*((expr[0])*((pow(r,4))+(((pow(a,2))*((r)*(((2)*(M))+(r))))+((pow(expr[1],2))*(pow(expr[2],2))))))))+((-6)*((r)*((pow((pow(a,2))+(pow(r,2)),2))*(((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))))*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_82(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[82] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.1250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("1.224744871391589049098642037352945695982973740328335064216346283625480188728657513269929716552320117"))*((pow(a,-7))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-4))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((((2)*(pow(a,4)))+(((-3)*((pow(a,2))*((r)*(((2)*(M))+(r)))))+((2)*((pow(r,2))*(((2)*(pow(M,2)))+(((5)*((M)*(r)))+((-3)*(pow(r,2)))))))))*((expr[2])*(((a)*((((16)*(pow(a,8)))+(((105)*(pow(r,8)))+(((5)*((pow(a,2))*((pow(r,5))*(((38)*(M))+((65)*(r))))))+(((pow(a,6))*((r)*(((166)*(M))+((147)*(r)))))+((pow(a,4))*((pow(r,2))*(((24)*(pow(M,2)))+(((356)*((M)*(r)))+((351)*(pow(r,2)))))))))))*((((pow(r,4))*(((-2)*(M))+(r)))+(((pow(a,4))*(((2)*(M))+(r)))+(((pow(a,2))*(((-4)*((pow(M,2))*(r)))+((2)*(pow(r,3)))))+((pow(expr[0],2))*(pow(expr[1],2))))))*(expr[2]))))+((-30)*((r)*((pow((pow(a,2))+(pow(r,2)),2))*((((7)*(pow(r,7)))+(((3)*((pow(a,6))*(((2)*(M))+(r))))+(((pow(a,2))*((pow(r,4))*(((22)*(M))+((17)*(r)))))+((pow(a,4))*((r)*(((16)*(pow(M,2)))+(((28)*((M)*(r)))+((13)*(pow(r,2))))))))))*((expr[0])*((expr[1])*(expr[3])))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_83(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[83] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("1.224744871391589049098642037352945695982973740328335064216346283625480188728657513269929716552320117"))*((pow(a,-5))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-3))*((expr[2])*(((((-16)*(pow(a,11)))+(((105)*((a)*((((2)*(M))+((-1)*(r)))*(pow(r,9)))))+(((-1)*((pow(a,9))*((r)*(((134)*(M))+((163)*(r))))))+(((10)*((pow(a,3))*((pow(r,6))*(((38)*(pow(M,2)))+(((46)*((M)*(r)))+((-43)*(pow(r,2))))))))+(((-2)*((pow(a,7))*((pow(r,2))*(((-154)*(pow(M,2)))+(((114)*((M)*(r)))+((249)*(pow(r,2))))))))+((4)*((pow(a,5))*((pow(r,3))*(((12)*(pow(M,3)))+(((172)*((pow(M,2))*(r)))+(((39)*((M)*(pow(r,2))))+((-169)*(pow(r,3))))))))))))))*(expr[2]))+((15)*((r)*((pow((pow(a,2))+(pow(r,2)),2))*((((3)*(pow(a,4)))+(((7)*(pow(r,4)))+((2)*((pow(a,2))*((r)*(((4)*(M))+((5)*(r))))))))*((expr[0])*((expr[1])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_84(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[84] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.2500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("1.224744871391589049098642037352945695982973740328335064216346283625480188728657513269929716552320117"))*((pow(a,-7))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-4))*(((16)*(pow(a,11)))+(((105)*((a)*((pow(r,9))*(((-2)*(M))+(r)))))+(((pow(a,9))*((r)*(((134)*(M))+((163)*(r)))))+(((10)*((pow(a,3))*((pow(r,6))*(((-38)*(pow(M,2)))+(((-46)*((M)*(r)))+((43)*(pow(r,2))))))))+(((-4)*((pow(a,5))*((pow(r,3))*(((12)*(pow(M,3)))+(((172)*((pow(M,2))*(r)))+(((39)*((M)*(pow(r,2))))+((-169)*(pow(r,3)))))))))+(((pow(a,7))*(((-308)*((pow(M,2))*(pow(r,2))))+(((228)*((M)*(pow(r,3))))+((498)*(pow(r,4))))))+((-15)*((pow((pow(a,2))+(pow(r,2)),2))*((((3)*(pow(a,4)))+(((7)*(pow(r,4)))+((2)*((pow(a,2))*((r)*(((4)*(M))+((5)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))))))).cast<double>());
}

}
