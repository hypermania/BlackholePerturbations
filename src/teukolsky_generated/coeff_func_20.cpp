
#include "../teukolsky_scalar.hpp"
#include <map>

typedef TeukolskyScalarPDE::HighPrecisionScalar HighPrecisionScalar;


void compute_coeffs_100(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[100] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("2.500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-3))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-2))*(((pow(a,4))+(((3)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+(r)))))))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((expr[0])*((expr[1])*((expr[2])*(((-3)*((a)*((expr[0])*((expr[1])*(expr[2])))))+(((pow(a,4))+(((3)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+(r)))))))*(expr[3])))))))))))).cast<double>());
}

void compute_coeffs_101(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[101] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("1.250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-5))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-3))*(((pow(a,4))+(((3)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+(r)))))))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*(((3)*((a)*((r)*(((pow(r,4))*(((-2)*(M))+(r)))+(((pow(a,4))*(((2)*(M))+(r)))+((pow(a,2))*(((-4)*((pow(M,2))*(r)))+((2)*(pow(r,3))))))))))+((-1)*(((pow(a,4))+(((3)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+(r)))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3]))))))))))))).cast<double>());
}

void compute_coeffs_102(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[102] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.1250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("2.236067977499789696409173668731276235440618359611525724270897245410520925637804899414414408378782275"))*((pow(a,-7))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-3))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,6))+(((pow(a,4))*((r)*(((3)*(M))+(r))))+(((-3)*((pow(r,5))*((M)+((3)*(r)))))+((-1)*((pow(a,2))*((pow(r,2))*(((4)*(pow(M,2)))+(((16)*((M)*(r)))+((9)*(pow(r,2)))))))))))*(((5)*((a)*((r)*(((21)*((pow(r,8))*(((-2)*(M))+(r))))+(((11)*((pow(a,8))*(((2)*(M))+(r))))+(((2)*((pow(a,2))*((pow(r,5))*(((-62)*(pow(M,2)))+(((-22)*((M)*(r)))+((37)*(pow(r,2))))))))+(((4)*((pow(a,4))*((pow(r,2))*(((-20)*(pow(M,3)))+(((-32)*((pow(M,2))*(r)))+(((15)*((M)*(pow(r,2))))+((24)*(pow(r,3)))))))))+((pow(a,6))*(((-4)*((pow(M,2))*(r)))+(((84)*((M)*(pow(r,2))))+((54)*(pow(r,3)))))))))))))+((-3)*((((3)*(pow(a,8)))+(((35)*(pow(r,8)))+(((12)*((pow(a,6))*((r)*(((4)*(M))+((3)*(r))))))+(((20)*((pow(a,2))*((pow(r,5))*(((4)*(M))+((5)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(((16)*(pow(M,2)))+(((64)*((M)*(r)))+((49)*(pow(r,2))))))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_103(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[103] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.1250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("2.236067977499789696409173668731276235440618359611525724270897245410520925637804899414414408378782275"))*((pow(a,-5))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-3))*(((pow(a,4))+(((3)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+(r)))))))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((5)*((a)*((r)*(((21)*((pow(r,8))*(((-2)*(M))+(r))))+(((11)*((pow(a,8))*(((2)*(M))+(r))))+(((2)*((pow(a,2))*((pow(r,5))*(((-62)*(pow(M,2)))+(((-22)*((M)*(r)))+((37)*(pow(r,2))))))))+(((4)*((pow(a,4))*((pow(r,2))*(((-20)*(pow(M,3)))+(((-32)*((pow(M,2))*(r)))+(((15)*((M)*(pow(r,2))))+((24)*(pow(r,3)))))))))+((pow(a,6))*(((-4)*((pow(M,2))*(r)))+(((84)*((M)*(pow(r,2))))+((54)*(pow(r,3)))))))))))))+((-3)*((((3)*(pow(a,8)))+(((35)*(pow(r,8)))+(((12)*((pow(a,6))*((r)*(((4)*(M))+((3)*(r))))))+(((20)*((pow(a,2))*((pow(r,5))*(((4)*(M))+((5)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(((16)*(pow(M,2)))+(((64)*((M)*(r)))+((49)*(pow(r,2))))))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_104(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[104] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.06250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("2.236067977499789696409173668731276235440618359611525724270897245410520925637804899414414408378782275"))*((pow(a,-7))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-4))*(((pow(a,4))+(((3)*(pow(r,4)))+((4)*((pow(a,2))*((r)*((M)+(r)))))))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*(((5)*((a)*((r)*(((21)*((pow(r,8))*(((-2)*(M))+(r))))+(((11)*((pow(a,8))*(((2)*(M))+(r))))+(((2)*((pow(a,2))*((pow(r,5))*(((-62)*(pow(M,2)))+(((-22)*((M)*(r)))+((37)*(pow(r,2))))))))+(((4)*((pow(a,4))*((pow(r,2))*(((-20)*(pow(M,3)))+(((-32)*((pow(M,2))*(r)))+(((15)*((M)*(pow(r,2))))+((24)*(pow(r,3)))))))))+((pow(a,6))*(((-4)*((pow(M,2))*(r)))+(((84)*((M)*(pow(r,2))))+((54)*(pow(r,3)))))))))))))+((-3)*((((3)*(pow(a,8)))+(((35)*(pow(r,8)))+(((12)*((pow(a,6))*((r)*(((4)*(M))+((3)*(r))))))+(((20)*((pow(a,2))*((pow(r,5))*(((4)*(M))+((5)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(((16)*(pow(M,2)))+(((64)*((M)*(r)))+((49)*(pow(r,2))))))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}
