
#include "../teukolsky_scalar.hpp"
#include <map>

typedef TeukolskyScalarPDE::HighPrecisionScalar HighPrecisionScalar;


void compute_coeffs_640(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[640] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.008300781250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-15))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-8))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,12))+(((143)*(pow(r,12)))+(((572)*((pow(a,2))*((pow(r,9))*((M)+(r)))))+(((12)*((pow(a,10))*((r)*(((5)*(M))+((3)*(r))))))+(((5)*((pow(a,8))*((pow(r,2))*(pow(((8)*(M))+((7)*(r)),2)))))+(((11)*((pow(a,4))*((pow(r,6))*(pow(((8)*(M))+((9)*(r)),2)))))+((8)*((pow(a,6))*((pow(r,3))*(((32)*(pow(M,3)))+(((128)*((pow(M,2))*(r)))+(((189)*((M)*(pow(r,2))))+((84)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((3781)*(pow(a,16)))+(((45045)*(pow(r,16)))+(((60060)*((pow(a,2))*((pow(r,13))*(((2)*(M))+((5)*(r))))))+(((4)*((pow(a,14))*((r)*(((11554)*(M))+((13339)*(r))))))+(((924)*((pow(a,4))*((pow(r,10))*(((84)*(pow(M,2)))+(((696)*((M)*(r)))+((931)*(pow(r,2))))))))+(((12)*((pow(a,12))*((pow(r,2))*(((5828)*(pow(M,2)))+(((28936)*((M)*(r)))+((23759)*(pow(r,2))))))))+(((36)*((pow(a,6))*((pow(r,7))*(((128)*(pow(M,3)))+(((8432)*((pow(M,2))*(r)))+(((39366)*((M)*(pow(r,2))))+((38253)*(pow(r,3)))))))))+(((4)*((pow(a,10))*((pow(r,3))*(((1408)*(pow(M,3)))+(((72048)*((pow(M,2))*(r)))+(((261786)*((M)*(pow(r,2))))+((200653)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((-256)*(pow(M,4)))+(((5120)*((pow(M,3))*(r)))+(((222096)*((pow(M,2))*(pow(r,2))))+(((820160)*((M)*(pow(r,3))))+((669599)*(pow(r,4))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((315)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(a,12))+(((143)*(pow(r,12)))+(((572)*((pow(a,2))*((pow(r,9))*((M)+(r)))))+(((12)*((pow(a,10))*((r)*(((5)*(M))+((3)*(r))))))+(((5)*((pow(a,8))*((pow(r,2))*(pow(((8)*(M))+((7)*(r)),2)))))+(((11)*((pow(a,4))*((pow(r,6))*(pow(((8)*(M))+((9)*(r)),2)))))+((8)*((pow(a,6))*((pow(r,3))*(((32)*(pow(M,3)))+(((128)*((pow(M,2))*(r)))+(((189)*((M)*(pow(r,2))))+((84)*(pow(r,3)))))))))))))))*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_641(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[641] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.004150390625000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-17))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-9))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*(((pow(a,12))+(((143)*(pow(r,12)))+(((572)*((pow(a,2))*((pow(r,9))*((M)+(r)))))+(((12)*((pow(a,10))*((r)*(((5)*(M))+((3)*(r))))))+(((5)*((pow(a,8))*((pow(r,2))*(pow(((8)*(M))+((7)*(r)),2)))))+(((11)*((pow(a,4))*((pow(r,6))*(pow(((8)*(M))+((9)*(r)),2)))))+((8)*((pow(a,6))*((pow(r,3))*(((32)*(pow(M,3)))+(((128)*((pow(M,2))*(r)))+(((189)*((M)*(pow(r,2))))+((84)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((3781)*(pow(a,16)))+(((45045)*(pow(r,16)))+(((60060)*((pow(a,2))*((pow(r,13))*(((2)*(M))+((5)*(r))))))+(((4)*((pow(a,14))*((r)*(((11554)*(M))+((13339)*(r))))))+(((924)*((pow(a,4))*((pow(r,10))*(((84)*(pow(M,2)))+(((696)*((M)*(r)))+((931)*(pow(r,2))))))))+(((12)*((pow(a,12))*((pow(r,2))*(((5828)*(pow(M,2)))+(((28936)*((M)*(r)))+((23759)*(pow(r,2))))))))+(((36)*((pow(a,6))*((pow(r,7))*(((128)*(pow(M,3)))+(((8432)*((pow(M,2))*(r)))+(((39366)*((M)*(pow(r,2))))+((38253)*(pow(r,3)))))))))+(((4)*((pow(a,10))*((pow(r,3))*(((1408)*(pow(M,3)))+(((72048)*((pow(M,2))*(r)))+(((261786)*((M)*(pow(r,2))))+((200653)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((-256)*(pow(M,4)))+(((5120)*((pow(M,3))*(r)))+(((222096)*((pow(M,2))*(pow(r,2))))+(((820160)*((M)*(pow(r,3))))+((669599)*(pow(r,4))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((315)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(a,12))+(((143)*(pow(r,12)))+(((572)*((pow(a,2))*((pow(r,9))*((M)+(r)))))+(((12)*((pow(a,10))*((r)*(((5)*(M))+((3)*(r))))))+(((5)*((pow(a,8))*((pow(r,2))*(pow(((8)*(M))+((7)*(r)),2)))))+(((11)*((pow(a,4))*((pow(r,6))*(pow(((8)*(M))+((9)*(r)),2)))))+((8)*((pow(a,6))*((pow(r,3))*(((32)*(pow(M,3)))+(((128)*((pow(M,2))*(r)))+(((189)*((M)*(pow(r,2))))+((84)*(pow(r,3)))))))))))))))*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_642(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[642] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("-0.03320312500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((pow(a,-16))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-9))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,12))+(((143)*(pow(r,12)))+(((572)*((pow(a,2))*((pow(r,9))*((M)+(r)))))+(((12)*((pow(a,10))*((r)*(((5)*(M))+((3)*(r))))))+(((5)*((pow(a,8))*((pow(r,2))*(pow(((8)*(M))+((7)*(r)),2)))))+(((11)*((pow(a,4))*((pow(r,6))*(pow(((8)*(M))+((9)*(r)),2)))))+((8)*((pow(a,6))*((pow(r,3))*(((32)*(pow(M,3)))+(((128)*((pow(M,2))*(r)))+(((189)*((M)*(pow(r,2))))+((84)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((3781)*(pow(a,16)))+(((45045)*(pow(r,16)))+(((60060)*((pow(a,2))*((pow(r,13))*(((2)*(M))+((5)*(r))))))+(((4)*((pow(a,14))*((r)*(((11554)*(M))+((13339)*(r))))))+(((924)*((pow(a,4))*((pow(r,10))*(((84)*(pow(M,2)))+(((696)*((M)*(r)))+((931)*(pow(r,2))))))))+(((12)*((pow(a,12))*((pow(r,2))*(((5828)*(pow(M,2)))+(((28936)*((M)*(r)))+((23759)*(pow(r,2))))))))+(((36)*((pow(a,6))*((pow(r,7))*(((128)*(pow(M,3)))+(((8432)*((pow(M,2))*(r)))+(((39366)*((M)*(pow(r,2))))+((38253)*(pow(r,3)))))))))+(((4)*((pow(a,10))*((pow(r,3))*(((1408)*(pow(M,3)))+(((72048)*((pow(M,2))*(r)))+(((261786)*((M)*(pow(r,2))))+((200653)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((-256)*(pow(M,4)))+(((5120)*((pow(M,3))*(r)))+(((222096)*((pow(M,2))*(pow(r,2))))+(((820160)*((M)*(pow(r,3))))+((669599)*(pow(r,4))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((315)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(a,12))+(((143)*(pow(r,12)))+(((572)*((pow(a,2))*((pow(r,9))*((M)+(r)))))+(((12)*((pow(a,10))*((r)*(((5)*(M))+((3)*(r))))))+(((5)*((pow(a,8))*((pow(r,2))*(pow(((8)*(M))+((7)*(r)),2)))))+(((11)*((pow(a,4))*((pow(r,6))*(pow(((8)*(M))+((9)*(r)),2)))))+((8)*((pow(a,6))*((pow(r,3))*(((32)*(pow(M,3)))+(((128)*((pow(M,2))*(r)))+(((189)*((M)*(pow(r,2))))+((84)*(pow(r,3)))))))))))))))*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_643(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[643] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.0001220703125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("0.8790490729915325536511063331043415676195352356091510199804805750041450303536755443171195818332736993"))*((pow(a,-19))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-10))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,16))+(((3)*((pow(a,14))*((r)*(((19)*(M))+(r)))))+(((pow(a,12))*((pow(r,2))*(((142)*(pow(M,2)))+(((-1457)*((M)*(r)))+((-979)*(pow(r,2)))))))+(((143)*((pow(r,14))*(((2)*(pow(M,2)))+(((71)*((M)*(r)))+((-36)*(pow(r,2)))))))+(((143)*((pow(a,2))*((pow(r,11))*(((8)*(pow(M,3)))+(((292)*((pow(M,2))*(r)))+(((137)*((M)*(pow(r,2))))+((-177)*(pow(r,3)))))))))+(((-1)*((pow(a,10))*((pow(r,3))*(((584)*(pow(M,3)))+(((6884)*((pow(M,2))*(r)))+(((17307)*((M)*(pow(r,2))))+((8709)*(pow(r,3)))))))))+(((11)*((pow(a,4))*((pow(r,8))*(((128)*(pow(M,4)))+(((4832)*((pow(M,3))*(r)))+(((7926)*((pow(M,2))*(pow(r,2))))+(((-1305)*((M)*(pow(r,3))))+((-4619)*(pow(r,4))))))))))+(((-1)*((pow(a,8))*((pow(r,4))*(((128)*(pow(M,4)))+(((-12320)*((pow(M,3))*(r)))+(((8894)*((pow(M,2))*(pow(r,2))))+(((53093)*((M)*(pow(r,3))))+((30105)*(pow(r,4))))))))))+((pow(a,6))*((pow(r,5))*(((512)*(pow(M,5)))+(((20224)*((pow(M,4))*(r)))+(((64400)*((pow(M,3))*(pow(r,2))))+(((43848)*((pow(M,2))*(pow(r,3))))+(((-61093)*((M)*(pow(r,4))))+((-53023)*(pow(r,5))))))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((368961)*(pow(a,20)))+(((14549535)*(pow(r,20)))+(((1021020)*((pow(a,2))*((pow(r,17))*(((53)*(M))+((116)*(r))))))+(((20)*((pow(a,18))*((r)*(((406247)*(M))+((387604)*(r))))))+(((3003)*((pow(a,4))*((pow(r,14))*(((20896)*(pow(M,2)))+(((123264)*((M)*(r)))+((142159)*(pow(r,2))))))))+(((pow(a,16))*((pow(r,2))*(((29657632)*(pow(M,2)))+(((94657152)*((M)*(r)))+((60579883)*(pow(r,2)))))))+(((6864)*((pow(a,6))*((pow(r,11))*(((3336)*(pow(M,3)))+(((49848)*((pow(M,2))*(r)))+(((159253)*((M)*(pow(r,2))))+((130322)*(pow(r,3)))))))))+(((16)*((pow(a,14))*((pow(r,3))*(((1323624)*(pow(M,3)))+(((13107048)*((pow(M,2))*(r)))+(((28186577)*((M)*(pow(r,2))))+((15780422)*(pow(r,3)))))))))+(((22)*((pow(a,8))*((pow(r,8))*(((35840)*(pow(M,4)))+(((4091648)*((pow(M,3))*(r)))+(((35032080)*((pow(M,2))*(pow(r,2))))+(((82512320)*((M)*(pow(r,3))))+((54630905)*(pow(r,4))))))))))+(((2)*((pow(a,12))*((pow(r,4))*(((465920)*(pow(M,4)))+(((43287808)*((pow(M,3))*(r)))+(((302548560)*((pow(M,2))*(pow(r,2))))+(((586786880)*((M)*(pow(r,3))))+((322460845)*(pow(r,4))))))))))+((8)*((pow(a,10))*((pow(r,5))*(((-7168)*(pow(M,5)))+(((215040)*((pow(M,4))*(r)))+(((16564448)*((pow(M,3))*(pow(r,2))))+(((114542720)*((pow(M,2))*(pow(r,3))))+(((230915865)*((M)*(pow(r,4))))+((134499512)*(pow(r,5)))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((3465)*((pow((pow(a,2))+(pow(r,2)),4))*((((7)*(pow(a,16)))+(((4199)*(pow(r,16)))+(((56)*((pow(a,14))*((r)*(((12)*(M))+((7)*(r))))))+(((1768)*((pow(a,2))*((pow(r,13))*(((12)*(M))+((13)*(r))))))+(((28)*((pow(a,12))*((pow(r,2))*(((240)*(pow(M,2)))+(((384)*((M)*(r)))+((151)*(pow(r,2))))))))+(((52)*((pow(a,4))*((pow(r,10))*(((720)*(pow(M,2)))+(((1728)*((M)*(r)))+((1013)*(pow(r,2))))))))+(((56)*((pow(a,10))*((pow(r,3))*(((256)*(pow(M,3)))+(((864)*((pow(M,2))*(r)))+(((972)*((M)*(pow(r,2))))+((345)*(pow(r,3)))))))))+(((104)*((pow(a,6))*((pow(r,7))*(((256)*(pow(M,3)))+(((1056)*((pow(M,2))*(r)))+(((1452)*((M)*(pow(r,2))))+((627)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((3072)*(pow(M,4)))+(((20480)*((pow(M,3))*(r)))+(((57024)*((pow(M,2))*(pow(r,2))))+(((63360)*((M)*(pow(r,3))))+((23397)*(pow(r,4))))))))))))))))))*(expr[3]))))))))))))))).cast<double>());
}

void compute_coeffs_644(const TeukolskyScalarPDE::HighPrecisionScalar a, const TeukolskyScalarPDE::HighPrecisionScalar M, const TeukolskyScalarPDE::HighPrecisionVector &r, const std::vector<TeukolskyScalarPDE::HighPrecisionVector> &expr, std::vector<TeukolskyScalarPDE::ComplexVector> &coeffs) {
coeffs[644] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("-0.0001220703125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("0.8790490729915325536511063331043415676195352356091510199804805750041450303536755443171195818332736993"))*((pow(a,-17))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-9))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,12))+(((143)*(pow(r,12)))+(((572)*((pow(a,2))*((pow(r,9))*((M)+(r)))))+(((12)*((pow(a,10))*((r)*(((5)*(M))+((3)*(r))))))+(((5)*((pow(a,8))*((pow(r,2))*(pow(((8)*(M))+((7)*(r)),2)))))+(((11)*((pow(a,4))*((pow(r,6))*(pow(((8)*(M))+((9)*(r)),2)))))+((8)*((pow(a,6))*((pow(r,3))*(((32)*(pow(M,3)))+(((128)*((pow(M,2))*(r)))+(((189)*((M)*(pow(r,2))))+((84)*(pow(r,3)))))))))))))))*((expr[0])*((expr[1])*((expr[2])*(((-1)*((a)*((((368961)*(pow(a,20)))+(((14549535)*(pow(r,20)))+(((1021020)*((pow(a,2))*((pow(r,17))*(((53)*(M))+((116)*(r))))))+(((20)*((pow(a,18))*((r)*(((406247)*(M))+((387604)*(r))))))+(((3003)*((pow(a,4))*((pow(r,14))*(((20896)*(pow(M,2)))+(((123264)*((M)*(r)))+((142159)*(pow(r,2))))))))+(((pow(a,16))*((pow(r,2))*(((29657632)*(pow(M,2)))+(((94657152)*((M)*(r)))+((60579883)*(pow(r,2)))))))+(((6864)*((pow(a,6))*((pow(r,11))*(((3336)*(pow(M,3)))+(((49848)*((pow(M,2))*(r)))+(((159253)*((M)*(pow(r,2))))+((130322)*(pow(r,3)))))))))+(((16)*((pow(a,14))*((pow(r,3))*(((1323624)*(pow(M,3)))+(((13107048)*((pow(M,2))*(r)))+(((28186577)*((M)*(pow(r,2))))+((15780422)*(pow(r,3)))))))))+(((22)*((pow(a,8))*((pow(r,8))*(((35840)*(pow(M,4)))+(((4091648)*((pow(M,3))*(r)))+(((35032080)*((pow(M,2))*(pow(r,2))))+(((82512320)*((M)*(pow(r,3))))+((54630905)*(pow(r,4))))))))))+(((2)*((pow(a,12))*((pow(r,4))*(((465920)*(pow(M,4)))+(((43287808)*((pow(M,3))*(r)))+(((302548560)*((pow(M,2))*(pow(r,2))))+(((586786880)*((M)*(pow(r,3))))+((322460845)*(pow(r,4))))))))))+((8)*((pow(a,10))*((pow(r,5))*(((-7168)*(pow(M,5)))+(((215040)*((pow(M,4))*(r)))+(((16564448)*((pow(M,3))*(pow(r,2))))+(((114542720)*((pow(M,2))*(pow(r,3))))+(((230915865)*((M)*(pow(r,4))))+((134499512)*(pow(r,5)))))))))))))))))))))*((expr[0])*((expr[1])*(expr[2]))))))+((3465)*((pow((pow(a,2))+(pow(r,2)),4))*((((7)*(pow(a,16)))+(((4199)*(pow(r,16)))+(((56)*((pow(a,14))*((r)*(((12)*(M))+((7)*(r))))))+(((1768)*((pow(a,2))*((pow(r,13))*(((12)*(M))+((13)*(r))))))+(((28)*((pow(a,12))*((pow(r,2))*(((240)*(pow(M,2)))+(((384)*((M)*(r)))+((151)*(pow(r,2))))))))+(((52)*((pow(a,4))*((pow(r,10))*(((720)*(pow(M,2)))+(((1728)*((M)*(r)))+((1013)*(pow(r,2))))))))+(((56)*((pow(a,10))*((pow(r,3))*(((256)*(pow(M,3)))+(((864)*((pow(M,2))*(r)))+(((972)*((M)*(pow(r,2))))+((345)*(pow(r,3)))))))))+(((104)*((pow(a,6))*((pow(r,7))*(((256)*(pow(M,3)))+(((1056)*((pow(M,2))*(r)))+(((1452)*((M)*(pow(r,2))))+((627)*(pow(r,3)))))))))+((2)*((pow(a,8))*((pow(r,4))*(((3072)*(pow(M,4)))+(((20480)*((pow(M,3))*(r)))+(((57024)*((pow(M,2))*(pow(r,2))))+(((63360)*((M)*(pow(r,3))))+((23397)*(pow(r,4))))))))))))))))))*(expr[3]))))))))))))))).cast<double>());
}
