
#include "../teukolsky.hpp"

namespace Teukolsky {

void compute_coeffs_scalar_65(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[65] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("-0.5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("1.732050807568877293527446341505872366942805253810380628055806979451933016908800037081146186757248576"))*((pow(a,-6))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-4))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((a)*((r)*(((105)*((pow(r,12))*(((-2)*(M))+(r))))+(((81)*((pow(a,12))*(((2)*(M))+(r))))+(((10)*((pow(a,2))*((pow(r,9))*(((-50)*(pow(M,2)))+(((-76)*((M)*(r)))+((61)*(pow(r,2))))))))+(((pow(a,10))*(((-212)*((pow(M,2))*(r)))+(((760)*((M)*(pow(r,2))))+((514)*(pow(r,3))))))+(((pow(a,8))*((pow(r,2))*(((-256)*(pow(M,3)))+(((-1232)*((pow(M,2))*(r)))+(((1178)*((M)*(pow(r,2))))+((1351)*(pow(r,3))))))))+(((pow(a,4))*((pow(r,6))*(((-128)*(pow(M,3)))+(((-1808)*((pow(M,2))*(r)))+(((-746)*((M)*(pow(r,2))))+((1471)*(pow(r,3))))))))+((4)*((pow(a,6))*((pow(r,3))*(((16)*(pow(M,4)))+(((-96)*((pow(M,3))*(r)))+(((-582)*((pow(M,2))*(pow(r,2))))+(((96)*((M)*(pow(r,3))))+((471)*(pow(r,4))))))))))))))))))+((-15)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(a,4))+(((7)*(pow(r,4)))+((4)*((pow(a,2))*((r)*(((3)*(M))+((2)*(r))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_66(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[66] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.01562500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("0.9636241116594315332535932579639674980325262928726793824585213934257143886052522082397792738789757164"))*((pow(a,-9))*((pow(r,-3))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-5))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*(((pow(a,4))+(((-3)*((pow(a,2))*((M)*(r))))+((pow(r,2))*(((2)*(pow(M,2)))+(((5)*((M)*(r)))+((-3)*(pow(r,2))))))))*((expr[2])*(((a)*((((919)*(pow(a,12)))+(((3465)*(pow(r,12)))+(((420)*((pow(a,2))*((pow(r,9))*(((13)*(M))+((43)*(r))))))+(((12)*((pow(a,10))*((r)*(((391)*(M))+((655)*(r))))))+(((21)*((pow(a,4))*((pow(r,6))*(((32)*(pow(M,2)))+(((1008)*((M)*(r)))+((1833)*(pow(r,2))))))))+(((3)*((pow(a,8))*((pow(r,2))*(((288)*(pow(M,2)))+(((6544)*((M)*(r)))+((8577)*(pow(r,2))))))))+((8)*((pow(a,6))*((pow(r,3))*(((-16)*(pow(M,3)))+(((192)*((pow(M,2))*(r)))+(((3831)*((M)*(pow(r,2))))+((5336)*(pow(r,3)))))))))))))))*((((pow(r,4))*(((-2)*(M))+(r)))+(((pow(a,4))*(((2)*(M))+(r)))+(((pow(a,2))*(((-4)*((pow(M,2))*(r)))+((2)*(pow(r,3)))))+((pow(expr[0],2))*(pow(expr[1],2))))))*(expr[2]))))+((-210)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(a,8))+(((33)*(pow(r,8)))+(((4)*((pow(a,6))*((r)*(((8)*(M))+((5)*(r))))))+(((12)*((pow(a,2))*((pow(r,5))*(((8)*(M))+((7)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(((32)*(pow(M,2)))+(((64)*((M)*(r)))+((35)*(pow(r,2))))))))))))*((expr[0])*((expr[1])*(expr[3]))))))))))))))).cast<double>());
}

void compute_coeffs_scalar_67(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[67] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.03125000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("0.9636241116594315332535932579639674980325262928726793824585213934257143886052522082397792738789757164"))*((pow(a,-7))*((pow(r,-2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-4))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((expr[2])*(((-1)*((((3465)*((a)*((pow(r,16))*(((-2)*(M))+(r)))))+(((919)*((pow(a,17))*(((2)*(M))+(r))))+(((210)*((pow(a,3))*((pow(r,13))*(((-118)*(pow(M,2)))+(((-146)*((M)*(r)))+((119)*(pow(r,2))))))))+(((2)*((pow(a,15))*((r)*(((2854)*(pow(M,2)))+(((10206)*((M)*(r)))+((4849)*(pow(r,2))))))))+(((-42)*((pow(a,5))*((pow(r,10))*(((552)*(pow(M,3)))+(((2712)*((pow(M,2))*(r)))+(((904)*((M)*(pow(r,2))))+((-1859)*(pow(r,3)))))))))+(((2)*((pow(a,13))*((pow(r,2))*(((-8520)*(pow(M,3)))+(((4344)*((pow(M,2))*(r)))+(((39320)*((M)*(pow(r,2))))+((21185)*(pow(r,3)))))))))+(((2)*((pow(a,11))*((pow(r,3))*(((-1856)*(pow(M,4)))+(((-37792)*((pow(M,3))*(r)))+(((-23874)*((pow(M,2))*(pow(r,2))))+(((72130)*((M)*(pow(r,3))))+((51005)*(pow(r,4))))))))))+(((2)*((pow(a,7))*((pow(r,7))*(((-1216)*(pow(M,4)))+(((-43936)*((pow(M,3))*(r)))+(((-100734)*((pow(M,2))*(pow(r,2))))+(((14594)*((M)*(pow(r,3))))+((68867)*(pow(r,4))))))))))+((4)*((pow(a,9))*((pow(r,4))*(((128)*(pow(M,5)))+(((-1536)*((pow(M,4))*(r)))+(((-30808)*((pow(M,3))*(pow(r,2))))+(((-40768)*((pow(M,2))*(pow(r,3))))+(((31905)*((M)*(pow(r,4))))+((37400)*(pow(r,5)))))))))))))))))))*(expr[2])))+((105)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(a,8))+(((33)*(pow(r,8)))+(((4)*((pow(a,6))*((r)*(((8)*(M))+((5)*(r))))))+(((12)*((pow(a,2))*((pow(r,5))*(((8)*(M))+((7)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(((32)*(pow(M,2)))+(((64)*((M)*(r)))+((35)*(pow(r,2))))))))))))*((expr[0])*((expr[1])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_68(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[68] = std::complex<double>(1.0,0.0)*(((HighPrecisionScalar("0.01562500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("0.9636241116594315332535932579639674980325262928726793824585213934257143886052522082397792738789757164"))*((pow(a,-9))*((pow((pow(a,2))+(pow(r,2)),2))*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-5))*((pow((pow(r,4))+((pow(a,2))*((r)*(((2)*(M))+(r)))),-1))*(((a)*((r)*(((3465)*((pow(r,16))*(((-2)*(M))+(r))))+(((919)*((pow(a,16))*(((2)*(M))+(r))))+(((210)*((pow(a,2))*((pow(r,13))*(((-118)*(pow(M,2)))+(((-146)*((M)*(r)))+((119)*(pow(r,2))))))))+(((2)*((pow(a,14))*((r)*(((2854)*(pow(M,2)))+(((10206)*((M)*(r)))+((4849)*(pow(r,2))))))))+(((-42)*((pow(a,4))*((pow(r,10))*(((552)*(pow(M,3)))+(((2712)*((pow(M,2))*(r)))+(((904)*((M)*(pow(r,2))))+((-1859)*(pow(r,3)))))))))+(((2)*((pow(a,12))*((pow(r,2))*(((-8520)*(pow(M,3)))+(((4344)*((pow(M,2))*(r)))+(((39320)*((M)*(pow(r,2))))+((21185)*(pow(r,3)))))))))+(((2)*((pow(a,10))*((pow(r,3))*(((-1856)*(pow(M,4)))+(((-37792)*((pow(M,3))*(r)))+(((-23874)*((pow(M,2))*(pow(r,2))))+(((72130)*((M)*(pow(r,3))))+((51005)*(pow(r,4))))))))))+(((2)*((pow(a,6))*((pow(r,7))*(((-1216)*(pow(M,4)))+(((-43936)*((pow(M,3))*(r)))+(((-100734)*((pow(M,2))*(pow(r,2))))+(((14594)*((M)*(pow(r,3))))+((68867)*(pow(r,4))))))))))+((4)*((pow(a,8))*((pow(r,4))*(((128)*(pow(M,5)))+(((-1536)*((pow(M,4))*(r)))+(((-30808)*((pow(M,3))*(pow(r,2))))+(((-40768)*((pow(M,2))*(pow(r,3))))+(((31905)*((M)*(pow(r,4))))+((37400)*(pow(r,5)))))))))))))))))))))+((-105)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(a,8))+(((33)*(pow(r,8)))+(((4)*((pow(a,6))*((r)*(((8)*(M))+((5)*(r))))))+(((12)*((pow(a,2))*((pow(r,5))*(((8)*(M))+((7)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(((32)*(pow(M,2)))+(((64)*((M)*(r)))+((35)*(pow(r,2))))))))))))*((expr[0])*((expr[1])*((expr[2])*(expr[3])))))))))))))).cast<double>());
}

void compute_coeffs_scalar_69(const HighPrecisionScalar a, const HighPrecisionScalar M, const HighPrecisionVector &r, const std::vector<HighPrecisionVector> &expr, std::vector<ComplexVector> &coeffs) {
coeffs[69] = std::complex<double>(0.0,1.0)*(((HighPrecisionScalar("0.1250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))*((HighPrecisionScalar("0.9636241116594315332535932579639674980325262928726793824585213934257143886052522082397792738789757164"))*((pow(a,-8))*((M)*((pow((pow(a,2))+((r)*(((-2)*(M))+(r))),-5))*((pow((pow(r,3))+((pow(a,2))*(((2)*(M))+(r))),-1))*((expr[2])*(((((3465)*((a)*((pow(r,16))*(((-2)*(M))+(r)))))+(((919)*((pow(a,17))*(((2)*(M))+(r))))+(((210)*((pow(a,3))*((pow(r,13))*(((-118)*(pow(M,2)))+(((-146)*((M)*(r)))+((119)*(pow(r,2))))))))+(((2)*((pow(a,15))*((r)*(((2854)*(pow(M,2)))+(((10206)*((M)*(r)))+((4849)*(pow(r,2))))))))+(((-42)*((pow(a,5))*((pow(r,10))*(((552)*(pow(M,3)))+(((2712)*((pow(M,2))*(r)))+(((904)*((M)*(pow(r,2))))+((-1859)*(pow(r,3)))))))))+(((2)*((pow(a,13))*((pow(r,2))*(((-8520)*(pow(M,3)))+(((4344)*((pow(M,2))*(r)))+(((39320)*((M)*(pow(r,2))))+((21185)*(pow(r,3)))))))))+(((2)*((pow(a,11))*((pow(r,3))*(((-1856)*(pow(M,4)))+(((-37792)*((pow(M,3))*(r)))+(((-23874)*((pow(M,2))*(pow(r,2))))+(((72130)*((M)*(pow(r,3))))+((51005)*(pow(r,4))))))))))+(((2)*((pow(a,7))*((pow(r,7))*(((-1216)*(pow(M,4)))+(((-43936)*((pow(M,3))*(r)))+(((-100734)*((pow(M,2))*(pow(r,2))))+(((14594)*((M)*(pow(r,3))))+((68867)*(pow(r,4))))))))))+((4)*((pow(a,9))*((pow(r,4))*(((128)*(pow(M,5)))+(((-1536)*((pow(M,4))*(r)))+(((-30808)*((pow(M,3))*(pow(r,2))))+(((-40768)*((pow(M,2))*(pow(r,3))))+(((31905)*((M)*(pow(r,4))))+((37400)*(pow(r,5)))))))))))))))))))*(expr[2]))+((-105)*((pow((pow(a,2))+(pow(r,2)),4))*(((pow(a,8))+(((33)*(pow(r,8)))+(((4)*((pow(a,6))*((r)*(((8)*(M))+((5)*(r))))))+(((12)*((pow(a,2))*((pow(r,5))*(((8)*(M))+((7)*(r))))))+((2)*((pow(a,4))*((pow(r,2))*(((32)*(pow(M,2)))+(((64)*((M)*(r)))+((35)*(pow(r,2))))))))))))*((expr[0])*((expr[1])*(expr[3])))))))))))))).cast<double>());
}

}
